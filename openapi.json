{
	"swagger": "2.0",
	"info": {
		"version": "1.1",
		"title": "Typeform",
		"description": "Typeform APIs"
	},
	"host": "api.typeform.com",
	"basePath": "/",
	"schemes": ["https"],
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"tags": [{
		"name": "Accounts",
		"description": "Create and manage accounts."
	}, {
		"name": "AuthAPI",
		"description": "Authentication, applications management, OAuth2"
	}, {
		"name": "Connect API",
		"description": "Documentation intended for external integrations with a native experience. This documentation describes the endpoints that need to be implemented for a working integration."
	}, {
		"name": "Drafts",
		"description": "Retrieve and manage form drafts."
	}, {
		"name": "Form Validation",
		"description": "Validate form create and update requests"
	}, {
		"name": "Forms",
		"description": "Create and manage forms"
	}, {
		"name": "Image resizing",
		"description": "Request images by size"
	}, {
		"name": "Images",
		"description": "Create and manage images"
	}, {
		"name": "Integrations",
		"description": "Create and configure integrations. Sends form responses to your provider."
	}, {
		"name": "Landings",
		"description": "Landings for forms"
	}, {
		"name": "Machine Learning",
		"description": "Service for ML models ti Builder"
	}, {
		"name": "Metrics",
		"description": "Metrics about responses"
	}, {
		"name": "Reports",
		"description": "Reports about responses"
	}, {
		"name": "Responses",
		"description": "Responses for a form"
	}, {
		"name": "Submissions",
		"description": "Submissions on forms"
	}, {
		"name": "Teams",
		"description": "Retrieve and manage your team."
	}, {
		"name": "Theme Validation",
		"description": "Validate theme create and update requests"
	}, {
		"name": "Themes",
		"description": "Create and manage themes"
	}, {
		"name": "Typebot",
		"description": "Typebot configuration"
	}, {
		"name": "User",
		"description": "Management of the current user"
	}, {
		"name": "Webhooks",
		"description": "Create and configure webhooks to send form responses to your URL or web application."
	}, {
		"name": "Workspaces",
		"description": "Create and manage workspaces."
	}, {
		"name": "Zapier",
		"description": "Zapier integration and configuration"
	}],
	"securityDefinitions": {
		"legacy_bearer_auth": {
			"name": "api_key",
			"type": "apiKey",
			"in": "query",
			"description": "For legacy v0/v1 APIs or those that have not yet converted to OAuth 2 access tokens, use `?api_key=xxx` in the querystring."
		},
		"legacy_transition_auth": {
			"name": "Authorization",
			"type": "apiKey",
			"in": "header",
			"description": "For some newer APIs, the api_key is passed in the `Authorization` header in the form of `Bearer <accessToken>`. Once these APIs transition to using the public API access token and internal JWT token, they should change to using bearer_auth."
		},
		"bearer_auth": {
			"name": "Authorization",
			"type": "apiKey",
			"in": "header",
			"description": "To authenticate to any Typeform API, you'll need to pass a public API access token to the `Authorization` header in the form of `Bearer <accessToken>`. For calls inside the private network the same applies, but a JWT should be passed instead of a public API access token."
		},
		"internal_jwt_auth": {
			"name": "Authorization",
			"type": "apiKey",
			"in": "header",
			"description": "A string representation of JWT containing at least two parameters:\n\n`ctx.user_id` — user's id\n\n`ctx.account_id` — user's default account id\n`ctx.account_uid` — user's default account uid\nThe usage of account_(u)id from JWT is discouraged, user can have access to multiple accounts, every endpoint has to be account aware if it's needed.\n\nThis JWT must be signed by the appropriate authority."
		},
		"clientIDSecretAuth": {
			"type": "basic",
			"description": "This authentication type implies passing\n`client_id` and `client_secret` values for your\napplications as `username` and `password` parameters\nin the Basic Auth scheme.\n\nExample (pseudocode):\n\n```\nconst client_id = \"...\"\nconst client_secret = \"...\"\n\nfunction doRequest() {\n  request = http.NewRequest(...)\n  request.headers[\"Authorization\"] = base64(client_id + \":\" + client_secret)\n  http.send_request(request)\n}\n```\n"
		}
	},
	"definitions": {
		"FormResultCounter": {
			"type": "object",
			"properties": {
				"count": {
					"type": "number",
					"format": "integer"
				}
			}
		},
		"ResultMetrics": {
			"type": "object",
			"properties": {
				"visits": {
					"type": "number"
				},
				"unique": {
					"type": "number"
				},
				"average": {
					"type": "number"
				}
			}
		},
		"FormResultMetrics": {
			"type": "object",
			"properties": {
				"desktop": {
					"type": "object",
					"properties": {
						"visits": {
							"type": "number"
						},
						"unique": {
							"type": "number"
						},
						"average": {
							"type": "number"
						}
					}
				},
				"tablet": {
					"type": "object",
					"properties": {
						"visits": {
							"type": "number"
						},
						"unique": {
							"type": "number"
						},
						"average": {
							"type": "number"
						}
					}
				},
				"phone": {
					"type": "object",
					"properties": {
						"visits": {
							"type": "number"
						},
						"unique": {
							"type": "number"
						},
						"average": {
							"type": "number"
						}
					}
				},
				"unknown": {
					"type": "object",
					"properties": {
						"visits": {
							"type": "number"
						},
						"unique": {
							"type": "number"
						},
						"average": {
							"type": "number"
						}
					}
				}
			},
			"example": {
				"desktop": {
					"average": 1,
					"unique": 3,
					"visits": 4
				},
				"phone": {
					"average": 1,
					"unique": 3,
					"visits": 4
				},
				"tablet": {
					"average": 1,
					"unique": 3,
					"visits": 4
				},
				"unknown": {
					"average": 1,
					"unique": 3,
					"visits": 4
				}
			}
		},
		"Metadata": {
			"type": "object",
			"description": "Metadata about a client's HTTP request.",
			"properties": {
				"user_agent": {
					"type": "string"
				},
				"platform": {
					"type": "string",
					"description": "Derived from user agent"
				},
				"referer": {
					"type": "string"
				},
				"network_id": {
					"type": "string",
					"description": "Ip of the client"
				}
			},
			"required": ["user_agent"]
		},
		"Landing": {
			"type": "object",
			"description": "Landing resource as retrieved from the API.",
			"properties": {
				"hidden": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"metadata": {
					"type": "object",
					"description": "Metadata about a client's HTTP request.",
					"properties": {
						"user_agent": {
							"type": "string"
						},
						"platform": {
							"type": "string",
							"description": "Derived from user agent"
						},
						"referer": {
							"type": "string"
						},
						"network_id": {
							"type": "string",
							"description": "Masked client's IP"
						}
					}
				},
				"landed_at": {
					"type": "string"
				},
				"_links": {
					"type": "object",
					"properties": {
						"self": {
							"type": "string"
						}
					}
				}
			}
		},
		"LandingCreate": {
			"type": "object",
			"description": "Landing resource as created by clients.",
			"properties": {
				"hidden": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"field": {
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						}
					}
				},
				"metadata": {
					"type": "object",
					"description": "Metadata about a client's HTTP request.",
					"properties": {
						"user_agent": {
							"type": "string"
						},
						"referer": {
							"type": "string"
						},
						"ip": {
							"type": "string",
							"description": "Client's IP"
						}
					},
					"required": ["user_agent"]
				}
			}
		},
		"FormSubmission": {
			"type": "object",
			"description": "Complete form submission as stored in the database. Contains metadata, landing information, and the submitted answers.",
			"properties": {
				"landing_id": {
					"type": "string",
					"description": "Deprecated; now `response_id`."
				},
				"response_id": {
					"type": "string",
					"description": "Unique ID for the response. Note that `response_id` values are unique per form but are not unique globally."
				},
				"landed_at": {
					"type": "string",
					"description": "Time of the form landing. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time."
				},
				"submitted_at": {
					"type": "string",
					"description": "Time that the form response was submitted. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time."
				},
				"metadata": {
					"type": "object",
					"description": "Metadata about a client's HTTP request.",
					"properties": {
						"user_agent": {
							"type": "string"
						},
						"platform": {
							"type": "string",
							"description": "Derived from user agent"
						},
						"referer": {
							"type": "string"
						},
						"network_id": {
							"type": "string",
							"description": "Ip of the client"
						}
					},
					"required": ["user_agent"]
				},
				"hidden": {
					"type": "object"
				},
				"definition": {
					"type": "object",
					"description": "Subset of a complete form definition to be included with a submission.",
					"properties": {
						"fields": {
							"type": "array",
							"items": {
								"type": "object",
								"description": "Subset of a complete field definition to be included with a submission.",
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"answers": {
					"type": "array",
					"items": {
						"type": "object",
						"description": "A sum of all fields that may occur in an answer. Based on the\n field type, different properties are required.",
						"properties": {
							"field": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"description": "The unique id of the form field the answer refers to."
									},
									"type": {
										"type": "string",
										"description": "The field's type in the original form."
									},
									"ref": {
										"type": "string",
										"description": "The reference for the question the answer relates to. Use the `ref` value to match answers with questions. The Responses payload only includes `ref` for the fields where you specified them when you created the form."
									},
									"title": {
										"type": "string",
										"description": "The form field's title which the answer is related to."
									}
								},
								"required": ["id"]
							},
							"type": {
								"type": "string",
								"description": "The answer-field's type.",
								"enum": ["choice", "choices", "date", "email", "url", "file_url", "number", "boolean", "text", "payment"]
							},
							"choice": {
								"type": "object",
								"description": "Represents single choice answers for dropdown-like fields.",
								"properties": {
									"label": {
										"type": "string"
									},
									"other": {
										"type": "string"
									}
								}
							},
							"choices": {
								"type": "object",
								"description": "Represents multiple choice answers.",
								"properties": {
									"labels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"other": {
										"type": "string"
									}
								}
							},
							"date": {
								"type": "string",
								"format": "date-time"
							},
							"email": {
								"type": "string",
								"format": "email"
							},
							"file_url": {
								"type": "string",
								"format": "uri"
							},
							"number": {
								"type": "number"
							},
							"boolean": {
								"type": "boolean"
							},
							"text": {
								"type": "string"
							},
							"url": {
								"type": "string",
								"format": "uri"
							},
							"payment": {
								"type": "object",
								"properties": {
									"amount": {
										"type": "string"
									},
									"last4": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"required": ["type"]
					}
				},
				"calculated": {
					"type": "object",
					"properties": {
						"score": {
							"type": "number"
						}
					}
				}
			}
		},
		"FormSubmissionCreate": {
			"type": "object",
			"properties": {
				"landing_id": {
					"type": "string"
				},
				"answers": {
					"type": "array",
					"items": {
						"type": "object",
						"description": "A sum of all fields that may occur in an answer. Based on the\n field type, different properties are required.",
						"properties": {
							"field": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"description": "The unique id of the form field the answer refers to."
									},
									"type": {
										"type": "string",
										"description": "The field's type in the original form."
									},
									"ref": {
										"type": "string",
										"description": "The reference for the question the answer relates to. Use the `ref` value to match answers with questions. The Responses payload only includes `ref` for the fields where you specified them when you created the form."
									},
									"title": {
										"type": "string",
										"description": "The form field's title which the answer is related to."
									}
								},
								"required": ["id"]
							},
							"type": {
								"type": "string",
								"description": "The answer-field's type.",
								"enum": ["choice", "choices", "date", "email", "url", "file_url", "number", "boolean", "text", "payment"]
							},
							"choice": {
								"type": "object",
								"description": "Represents single choice answers for dropdown-like fields.",
								"properties": {
									"label": {
										"type": "string"
									},
									"other": {
										"type": "string"
									}
								}
							},
							"choices": {
								"type": "object",
								"description": "Represents multiple choice answers.",
								"properties": {
									"labels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"other": {
										"type": "string"
									}
								}
							},
							"date": {
								"type": "string",
								"format": "date-time"
							},
							"email": {
								"type": "string",
								"format": "email"
							},
							"file_url": {
								"type": "string",
								"format": "uri"
							},
							"number": {
								"type": "number"
							},
							"boolean": {
								"type": "boolean"
							},
							"text": {
								"type": "string"
							},
							"url": {
								"type": "string",
								"format": "uri"
							},
							"payment": {
								"type": "object",
								"properties": {
									"amount": {
										"type": "string"
									},
									"last4": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"required": ["type"]
					}
				}
			},
			"required": ["landing_id"]
		},
		"FormResponses": {
			"type": "object",
			"description": "Representation of collection of responses to a specific form.\nIt is used for displaying results in a human-friendly format.",
			"example": {
				"total_items": 4,
				"page_count": 1,
				"items": [{
					"landing_id": "21085286190ffad1248d17c4135ee56f",
					"token": "21085286190ffad1248d17c4135ee56f",
					"response_id": "21085286190ffad1248d17c4135ee56f",
					"landed_at": "2017-09-14T22:33:59Z",
					"submitted_at": "2017-09-14T22:38:22Z",
					"metadata": {
						"user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8",
						"platform": "other",
						"referer": "https://user_id.typeform.com/to/lR6F4j",
						"network_id": "responsdent_network_id",
						"browser": "default"
					},
					"answers": [{
						"field": {
							"id": "hVONkQcnSNRj",
							"type": "dropdown",
							"ref": "my_custom_dropdown_reference"
						},
						"type": "text",
						"text": "Job opportunities"
					}, {
						"field": {
							"id": "RUqkXSeXBXSd",
							"type": "yes_no",
							"ref": "my_custom_yes_no_reference"
						},
						"type": "boolean",
						"boolean": false
					}, {
						"field": {
							"id": "gFFf3xAkJKsr",
							"type": "legal",
							"ref": "my_custom_legal_reference"
						},
						"type": "boolean",
						"boolean": true
					}, {
						"field": {
							"id": "JwWggjAKtOkA",
							"type": "short_text",
							"ref": "my_custom_short_text_reference"
						},
						"type": "text",
						"text": "Lian"
					}, {
						"field": {
							"id": "SMEUb7VJz92Q",
							"type": "email",
							"ref": "my_custom_email_reference"
						},
						"type": "email",
						"email": "lian1078@other.com"
					}, {
						"field": {
							"id": "pn48RmPazVdM",
							"type": "number",
							"ref": "my_custom_number_reference"
						},
						"type": "number",
						"number": 1
					}, {
						"field": {
							"id": "Q7M2XAwY04dW",
							"type": "number",
							"ref": "my_custom_number2_reference"
						},
						"type": "number",
						"number": 1
					}, {
						"field": {
							"id": "WOTdC00F8A3h",
							"type": "rating",
							"ref": "my_custom_rating_reference"
						},
						"type": "number",
						"number": 3
					}, {
						"field": {
							"id": "DlXFaesGBpoF",
							"type": "long_text",
							"ref": "my_custom_long_text_reference"
						},
						"type": "text",
						"text": "It's a big, busy city. I moved here for a job, but I like it, so I am planning to stay. I have made good friends here."
					}, {
						"field": {
							"id": "NRsxU591jIW9",
							"type": "opinion_scale",
							"ref": "my_custom_opinion_scale_reference"
						},
						"type": "number",
						"number": 1
					}, {
						"field": {
							"id": "PNe8ZKBK8C2Q",
							"type": "picture_choice",
							"ref": "my_custom_picture_choice_reference"
						},
						"type": "choices",
						"choices": {
							"labels": ["New York", "Tokyo"]
						}
					}, {
						"field": {
							"id": "KoJxDM3c6x8h",
							"type": "date",
							"ref": "my_custom_date_reference"
						},
						"type": "date",
						"date": "2012-03-20T00:00:00Z"
					}, {
						"field": {
							"id": "ceIXxpbP3t2q",
							"type": "multiple_choice",
							"ref": "my_custom_multiple_choice_reference"
						},
						"type": "choice",
						"choice": {
							"label": "A friend's experience in Sydney"
						}
					}, {
						"field": {
							"id": "k6TP9oLGgHjl",
							"type": "multiple_choice",
							"ref": "my_custom_multiple_choice2_reference"
						},
						"type": "choice",
						"choice": {
							"label": "Tokyo"
						}
					}],
					"hidden": {},
					"calculated": {
						"score": 2
					}
				}, {
					"landing_id": "610fc266478b41e4927945e20fe54ad2",
					"token": "610fc266478b41e4927945e20fe54ad2",
					"landed_at": "2017-09-14T22:27:38Z",
					"submitted_at": "2017-09-14T22:33:56Z",
					"metadata": {
						"user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36",
						"platform": "other",
						"referer": "https://user_id.typeform.com/to/lR6F4j",
						"network_id": "responsdent_network_id",
						"browser": "default"
					},
					"answers": [{
						"field": {
							"id": "k6TP9oLGgHjl",
							"type": "multiple_choice",
							"ref": "my_custom_multiple_choice2_reference"
						},
						"type": "choice",
						"choice": {
							"label": "New York"
						}
					}, {
						"field": {
							"id": "X4BgU2f1K6tG",
							"type": "file_upload",
							"ref": "my_custom_file_upload_reference"
						},
						"type": "file_url",
						"file_url": "https://api.typeform.com/forms/lT9Z2j/responses/7f46165474d11ee5836777d85df2cdab/fields/X4BgU2f1K6tG/files/afd8258fd453-aerial_view_rural_city_latvia_valmiera_urban_district_48132860.jpg"
					}, {
						"field": {
							"id": "ceIXxpbP3t2q",
							"type": "multiple_choice",
							"ref": "my_custom_multiple_choice_reference"
						},
						"type": "choice",
						"choice": {
							"label": "Other"
						}
					}, {
						"field": {
							"id": "hVONkQcnSNRj",
							"type": "dropdown",
							"ref": "my_custom_dropdown_reference"
						},
						"type": "text",
						"text": "Cost of living"
					}, {
						"field": {
							"id": "JwWggjAKtOkA",
							"type": "short_text",
							"ref": "my_custom_short_text_reference"
						},
						"type": "text",
						"text": "Sarah"
					}, {
						"field": {
							"id": "RUqkXSeXBXSd",
							"type": "yes_no",
							"ref": "my_custom_yes_no_reference"
						},
						"type": "boolean",
						"boolean": true
					}, {
						"field": {
							"id": "Fep7sEoBsnvC",
							"type": "long_text",
							"ref": "my_custom_long_text_reference"
						},
						"type": "text",
						"text": "I read a magazine article about traveling to Sydney"
					}, {
						"field": {
							"id": "gFFf3xAkJKsr",
							"type": "legal",
							"ref": "my_custom_legal_reference"
						},
						"type": "boolean",
						"boolean": true
					}, {
						"field": {
							"id": "BFcpoPU5yJPM",
							"type": "short_text",
							"ref": "my_custom_short_text_reference"
						},
						"type": "text",
						"text": "San Francisco"
					}, {
						"field": {
							"id": "SMEUb7VJz92Q",
							"type": "email",
							"ref": "my_custom_rmail_reference"
						},
						"type": "email",
						"email": "sarahbsmith@example.com"
					}, {
						"field": {
							"id": "pn48RmPazVdM",
							"type": "number",
							"ref": "my_custom_number_reference"
						},
						"type": "number",
						"number": 1
					}, {
						"field": {
							"id": "WOTdC00F8A3h",
							"type": "rating",
							"ref": "my_custom_rating_reference"
						},
						"type": "number",
						"number": 3
					}, {
						"field": {
							"id": "Q7M2XAwY04dW",
							"type": "number",
							"ref": "my_custom_number2_reference"
						},
						"type": "number",
						"number": 3
					}, {
						"field": {
							"id": "DlXFaesGBpoF",
							"type": "long_text",
							"ref": "my_custom_long_text_reference"
						},
						"type": "text",
						"text": "It's a rural area. Very quiet. There are a lot of farms...farming is the major industry here."
					}, {
						"field": {
							"id": "NRsxU591jIW9",
							"type": "opinion_scale",
							"ref": "my_custom_opinion_scale_reference"
						},
						"type": "number",
						"number": 1
					}, {
						"field": {
							"id": "KoJxDM3c6x8h",
							"type": "date",
							"ref": "my_custom_date_reference"
						},
						"type": "date",
						"date": "2016-05-13T00:00:00Z"
					}, {
						"field": {
							"id": "PNe8ZKBK8C2Q",
							"type": "picture_choice",
							"ref": "my_custom_picture_choice_reference"
						},
						"type": "choices",
						"choices": {
							"labels": ["London", "New York"]
						}
					}],
					"hidden": {},
					"calculated": {
						"score": 4
					}
				}, {
					"landing_id": "9ba5db11ec6c63d22f08aade805bd363",
					"token": "9ba5db11ec6c63d22f08aade805bd363",
					"landed_at": "2017-09-14T22:24:49Z",
					"submitted_at": "2017-09-14T22:27:34Z",
					"metadata": {
						"user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1",
						"platform": "other",
						"referer": "https://user_id.typeform.com/to/lR6F4j",
						"network_id": "responsdent_network_id",
						"browser": "default"
					},
					"answers": [{
						"field": {
							"id": "RUqkXSeXBXSd",
							"type": "yes_no",
							"ref": "my_custom_yes_no_reference"
						},
						"type": "boolean",
						"boolean": false
					}, {
						"field": {
							"id": "gFFf3xAkJKsr",
							"type": "legal",
							"ref": "my_custom_legal_reference"
						},
						"type": "boolean",
						"boolean": true
					}, {
						"field": {
							"id": "JwWggjAKtOkA",
							"type": "short_text",
							"ref": "my_custom_short_text_reference"
						},
						"type": "text",
						"text": "Paolo"
					}, {
						"field": {
							"id": "pn48RmPazVdM",
							"type": "number",
							"ref": "my_custom_number_reference"
						},
						"type": "number",
						"number": 5
					}, {
						"field": {
							"id": "Q7M2XAwY04dW",
							"type": "number",
							"ref": "my_custom_number2_reference"
						},
						"type": "number",
						"number": 5
					}, {
						"field": {
							"id": "PNe8ZKBK8C2Q",
							"type": "picture_choice",
							"ref": "my_custom_picture_choice_reference"
						},
						"type": "choices",
						"choices": {
							"labels": ["Barcelona", "Sydney"]
						}
					}, {
						"field": {
							"id": "WOTdC00F8A3h",
							"type": "rating",
							"ref": "my_custom_rating_reference"
						},
						"type": "number",
						"number": 5
					}, {
						"field": {
							"id": "DlXFaesGBpoF",
							"type": "long_text",
							"ref": "my_custom_long_text_reference"
						},
						"type": "text",
						"text": "I live in a medium-sized European city. It's not too crowded, and the people are nice. I like the weather. It's also easy to travel to many beautiful and interesting vacation destinations from where I live."
					}, {
						"field": {
							"id": "NRsxU591jIW9",
							"type": "opinion_scale",
							"ref": "my_custom_opinion_scale_reference"
						},
						"type": "number",
						"number": 4
					}, {
						"field": {
							"id": "KoJxDM3c6x8h",
							"type": "date",
							"ref": "my_custom_date_reference"
						},
						"type": "date",
						"date": "1999-08-01T00:00:00Z"
					}, {
						"field": {
							"id": "k6TP9oLGgHjl",
							"type": "multiple_choice",
							"ref": "my_custom_multiple_choice_reference"
						},
						"type": "choice",
						"choice": {
							"label": "Barcelona"
						}
					}],
					"hidden": {},
					"calculated": {
						"score": 10
					}
				}, {
					"landing_id": "5fcb3f9c162e1fcdaadff4405b741080",
					"token": "5fcb3f9c162e1fcdaadff4405b741080",
					"landed_at": "2017-09-15T09:09:30Z",
					"submitted_at": "0001-01-01T00:00:00Z",
					"metadata": {
						"user_agent": "Mozilla/5.0 (Linux; Android 4.1.2; GT-N7000 Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.91 Mobile Safari/537.36",
						"platform": "other",
						"referer": "https://user_id.typeform.com/to/lR6F4j",
						"network_id": "responsdent_network_id",
						"browser": "default"
					},
					"answers": null,
					"hidden": {},
					"calculated": {
						"score": 0
					}
				}]
			},
			"properties": {
				"total_items": {
					"type": "number",
					"format": "integer",
					"description": "Total number of items in the retrieved collection."
				},
				"page_count": {
					"type": "number",
					"format": "integer",
					"description": "Number of pages."
				},
				"_links": {
					"type": "object",
					"properties": {
						"metrics": {
							"type": "string"
						},
						"reports": {
							"type": "string"
						}
					}
				},
				"items": {
					"type": "array",
					"items": {
						"type": "object",
						"description": "Complete form submission as stored in the database. Contains metadata, landing information, and the submitted answers.",
						"properties": {
							"landing_id": {
								"type": "string",
								"description": "Deprecated; now `response_id`."
							},
							"response_id": {
								"type": "string",
								"description": "Unique ID for the response. Note that `response_id` values are unique per form but are not unique globally."
							},
							"landed_at": {
								"type": "string",
								"description": "Time of the form landing. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time."
							},
							"submitted_at": {
								"type": "string",
								"description": "Time that the form response was submitted. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time."
							},
							"metadata": {
								"type": "object",
								"description": "Metadata about a client's HTTP request.",
								"properties": {
									"user_agent": {
										"type": "string"
									},
									"platform": {
										"type": "string",
										"description": "Derived from user agent"
									},
									"referer": {
										"type": "string"
									},
									"network_id": {
										"type": "string",
										"description": "Ip of the client"
									}
								},
								"required": ["user_agent"]
							},
							"hidden": {
								"type": "object"
							},
							"definition": {
								"type": "object",
								"description": "Subset of a complete form definition to be included with a submission.",
								"properties": {
									"fields": {
										"type": "array",
										"items": {
											"type": "object",
											"description": "Subset of a complete field definition to be included with a submission.",
											"properties": {
												"id": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"title": {
													"type": "string"
												},
												"description": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"answers": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A sum of all fields that may occur in an answer. Based on the\n field type, different properties are required.",
									"properties": {
										"field": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "The unique id of the form field the answer refers to."
												},
												"type": {
													"type": "string",
													"description": "The field's type in the original form."
												},
												"ref": {
													"type": "string",
													"description": "The reference for the question the answer relates to. Use the `ref` value to match answers with questions. The Responses payload only includes `ref` for the fields where you specified them when you created the form."
												},
												"title": {
													"type": "string",
													"description": "The form field's title which the answer is related to."
												}
											},
											"required": ["id"]
										},
										"type": {
											"type": "string",
											"description": "The answer-field's type.",
											"enum": ["choice", "choices", "date", "email", "url", "file_url", "number", "boolean", "text", "payment"]
										},
										"choice": {
											"type": "object",
											"description": "Represents single choice answers for dropdown-like fields.",
											"properties": {
												"label": {
													"type": "string"
												},
												"other": {
													"type": "string"
												}
											}
										},
										"choices": {
											"type": "object",
											"description": "Represents multiple choice answers.",
											"properties": {
												"labels": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"other": {
													"type": "string"
												}
											}
										},
										"date": {
											"type": "string",
											"format": "date-time"
										},
										"email": {
											"type": "string",
											"format": "email"
										},
										"file_url": {
											"type": "string",
											"format": "uri"
										},
										"number": {
											"type": "number"
										},
										"boolean": {
											"type": "boolean"
										},
										"text": {
											"type": "string"
										},
										"url": {
											"type": "string",
											"format": "uri"
										},
										"payment": {
											"type": "object",
											"properties": {
												"amount": {
													"type": "string"
												},
												"last4": {
													"type": "string"
												},
												"name": {
													"type": "string"
												}
											}
										}
									},
									"required": ["type"]
								}
							},
							"calculated": {
								"type": "object",
								"properties": {
									"score": {
										"type": "number"
									}
								}
							}
						}
					}
				}
			}
		},
		"FormSubmissionAnswer": {
			"type": "object",
			"description": "A sum of all fields that may occur in an answer. Based on the\n field type, different properties are required.",
			"properties": {
				"field": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"description": "The unique id of the form field the answer refers to."
						},
						"type": {
							"type": "string",
							"description": "The field's type in the original form."
						},
						"ref": {
							"type": "string",
							"description": "The reference for the question the answer relates to. Use the `ref` value to match answers with questions. The Responses payload only includes `ref` for the fields where you specified them when you created the form."
						},
						"title": {
							"type": "string",
							"description": "The form field's title which the answer is related to."
						}
					},
					"required": ["id"]
				},
				"type": {
					"type": "string",
					"description": "The answer-field's type.",
					"enum": ["choice", "choices", "date", "email", "url", "file_url", "number", "boolean", "text", "payment"]
				},
				"choice": {
					"type": "object",
					"description": "Represents single choice answers for dropdown-like fields.",
					"properties": {
						"label": {
							"type": "string"
						},
						"other": {
							"type": "string"
						}
					}
				},
				"choices": {
					"type": "object",
					"description": "Represents multiple choice answers.",
					"properties": {
						"labels": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"other": {
							"type": "string"
						}
					}
				},
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"email": {
					"type": "string",
					"format": "email"
				},
				"file_url": {
					"type": "string",
					"format": "uri"
				},
				"number": {
					"type": "number"
				},
				"boolean": {
					"type": "boolean"
				},
				"text": {
					"type": "string"
				},
				"url": {
					"type": "string",
					"format": "uri"
				},
				"payment": {
					"type": "object",
					"properties": {
						"amount": {
							"type": "string"
						},
						"last4": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				}
			},
			"required": ["type"]
		},
		"ReportItem": {
			"type": "object",
			"properties": {
				"value": {
					"type": "string"
				},
				"count": {
					"type": "number",
					"format": "integer"
				}
			}
		},
		"ResultReports": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"value": {
						"type": "string"
					},
					"count": {
						"type": "number",
						"format": "integer"
					}
				}
			}
		},
		"TypebotReq": {
			"type": "object",
			"required": ["service"],
			"properties": {
				"token": {
					"type": "string"
				},
				"service": {
					"enum": ["Messenger"]
				}
			}
		},
		"TypebotResp": {
			"type": "object",
			"properties": {
				"connected_services": {
					"type": "object",
					"properties": {
						"messenger": {
							"type": "object",
							"properties": {
								"sharing_url": {
									"type": "string"
								}
							}
						},
						"slack": {
							"type": "object",
							"properties": {
								"bot_name": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"ZapierDefinition": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				}
			}
		},
		"ZapierFormList": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			}
		},
		"ApplicationCreateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 255
				},
				"description": {
					"type": "string",
					"maxLength": 5000
				},
				"homepage_url": {
					"type": "string",
					"format": "uri"
				},
				"logo_url": {
					"type": "string",
					"format": "uri"
				},
				"allowed_redirect_uris": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "uri"
					}
				},
				"token_expiration_period": {
					"description": "Time until the token expires. In seconds. If you specify 0, the token will not expire.",
					"type": "integer",
					"format": "uint32",
					"minimum": 60,
					"maximum": 604800
				}
			},
			"required": ["name", "homepage_url", "logo_url", "allowed_redirect_uris"]
		},
		"Application": {
			"type": "object",
			"properties": {
				"client_id": {
					"type": "string"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 255
				},
				"description": {
					"type": "string",
					"maxLength": 5000
				},
				"homepage_url": {
					"type": "string",
					"format": "uri"
				},
				"logo_url": {
					"type": "string",
					"format": "uri"
				},
				"allowed_redirect_uris": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "uri"
					}
				},
				"token_expiration_period": {
					"type": "integer",
					"format": "uint32"
				}
			},
			"required": ["name", "homepage_url", "logo_url", "allowed_redirect_uris"]
		},
		"ApplicationWithSecret": {
			"type": "object",
			"properties": {
				"client_id": {
					"type": "string"
				},
				"client_secret": {
					"type": "string"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 255
				},
				"description": {
					"type": "string",
					"maxLength": 5000
				},
				"homepage_url": {
					"type": "string",
					"format": "uri"
				},
				"logo_url": {
					"type": "string",
					"format": "uri"
				},
				"allowed_redirect_uris": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "uri"
					}
				},
				"token_expiration_period": {
					"type": "integer",
					"format": "uint32"
				}
			},
			"required": ["name", "homepage_url", "logo_url", "allowed_redirect_uris"]
		},
		"ApplicationSummary": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"homepage_url": {
					"type": "string"
				},
				"logo_url": {
					"type": "string"
				}
			},
			"required": ["name", "homepage_url"]
		},
		"ApplicationUpdateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 255
				},
				"description": {
					"type": "string",
					"maxLength": 5000
				},
				"homepage_url": {
					"type": "string",
					"format": "uri"
				},
				"logo_url": {
					"type": "string",
					"format": "uri"
				},
				"allowed_redirect_uris": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "uri"
					}
				},
				"token_expiration_period": {
					"type": "integer",
					"format": "uint32"
				}
			}
		},
		"Grant": {
			"type": "object",
			"properties": {
				"application": {
					"type": "object",
					"properties": {
						"client_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"homepage_url": {
							"type": "string"
						},
						"logo_url": {
							"type": "string"
						}
					}
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"stats": {
					"type": "object",
					"properties": {
						"codes_count": {
							"type": "number"
						},
						"tokens_count": {
							"type": "number"
						},
						"refresh_tokens_count": {
							"type": "number"
						}
					}
				}
			}
		},
		"CreatePersonalTokenRequest": {
			"type": "object",
			"required": ["description", "scopes"],
			"properties": {
				"description": {
					"type": "string"
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"CreatePersonalTokenResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"ref": {
					"type": "string",
					"description": "Personal Access Token"
				},
				"description": {
					"type": "string"
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PersonalToken": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"Code": {
			"type": "object",
			"required": ["client_id", "redirect_uri", "scopes", "payload"],
			"properties": {
				"code": {
					"type": "string"
				},
				"client_id": {
					"type": "string"
				},
				"redirect_uri": {
					"type": "string",
					"format": "url"
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"payload": {
					"type": "object",
					"required": ["account_id", "user_id", "plan"],
					"properties": {
						"account_id": {
							"type": "string"
						},
						"user_id": {
							"type": "string"
						},
						"plan": {
							"type": "string"
						},
						"impersonator_account_id": {
							"type": "string"
						}
					}
				}
			}
		},
		"Token": {
			"type": "object",
			"properties": {
				"ref": {
					"type": "string"
				},
				"jwt": {
					"type": "string"
				},
				"expires_at": {
					"type": "string"
				},
				"scopes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				}
			}
		},
		"UpgradePayload": {
			"type": "object",
			"required": ["access_token", "type"],
			"properties": {
				"access_token": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"Payload": {
			"type": "object",
			"required": ["account_id", "user_id", "plan"],
			"properties": {
				"account_id": {
					"type": "string"
				},
				"user_id": {
					"type": "string"
				},
				"plan": {
					"type": "string"
				},
				"impersonator_account_id": {
					"type": "string"
				}
			}
		},
		"Scopes": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"APIKeyMigrationRequest": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"APIKeyMigrationResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["api_key"],
				"properties": {
					"api_key": {
						"type": "string"
					},
					"access_token": {
						"type": "string"
					},
					"expires_in": {
						"type": "integer"
					},
					"refresh_token": {
						"type": "string"
					},
					"error": {
						"type": "string",
						"description": "An error code if the error happened during the particular API key processing. Possible error codes:\n- `API_KEY_INVALID`\n- `API_KEY_DOES_NOT_EXIST`\n- `API_KEY_ALREADY_MIGRATED`\n"
					}
				}
			}
		},
		"APIKeyMigration": {
			"type": "object",
			"required": ["api_key"],
			"properties": {
				"api_key": {
					"type": "string"
				},
				"access_token": {
					"type": "string"
				},
				"expires_in": {
					"type": "integer"
				},
				"refresh_token": {
					"type": "string"
				},
				"error": {
					"type": "string",
					"description": "An error code if the error happened during the particular API key processing. Possible error codes:\n- `API_KEY_INVALID`\n- `API_KEY_DOES_NOT_EXIST`\n- `API_KEY_ALREADY_MIGRATED`\n"
				}
			}
		},
		"ErrorResponse": {
			"title": "Error",
			"type": "object",
			"properties": {
				"code": {
					"description": "A developer-readable snake_case key, indicating some idea of what type of error occurred.",
					"example": "INVALID_JSON",
					"type": "string"
				},
				"description": {
					"description": "A developer-readable description of the error, expanding on the terse code.",
					"example": "Unable to process the JSON in the request body.",
					"type": "string"
				},
				"details": {
					"description": "An optional object containing more detailed info regarding which field the error occurred in.",
					"items": {
						"properties": {
							"code": {
								"description": "A developer-readable snake_case key, indicating some idea of what type of error occurred.",
								"example": "FIELD_LENGTH",
								"type": "string"
							},
							"description": {
								"description": "A developer-readable description about the field-level error.",
								"example": "The provided \"title\" field was 88 characters, and only accepts 64 characters.",
								"type": "string"
							},
							"field": {
								"description": "Which field the error occurred. This could refer to a field in the request body, request header, or query parameter.",
								"example": "title",
								"type": "string"
							},
							"help": {
								"description": "A URL linking to help content, to aid the client developer in resolving the error. This value should be provided whenever available.",
								"example": "https://developer.typeform.com/errors#FIELD_LENGTH",
								"type": "string"
							},
							"in": {
								"description": "The type of field that caused the error.",
								"enum": ["header", "body", "query"],
								"type": "string"
							}
						},
						"type": "object"
					},
					"type": "array"
				},
				"help": {
					"description": "A URL linking to help content, to aid the client developer in resolving the error. This value should be provided whenever available.",
					"example": "https://developer.typeform.com/errors#INVALID_JSON",
					"type": "string"
				}
			}
		},
		"Boxes": {
			"type": "array",
			"items": {
				"type": "object",
				"description": "Box is the boombox representation of a form field.",
				"properties": {
					"id": {
						"description": "It identifies the box inside the form.",
						"type": "string"
					},
					"ref": {
						"description": "Identifies the box by reference. It is used for piping.",
						"type": "string"
					},
					"type": {
						"description": "It determines the type of the field box to render.",
						"type": "string",
						"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "group", "phone_number"]
					},
					"title": {
						"description": "Title is the text that will show up in the top of the field box.",
						"type": "string"
					},
					"summary": {
						"type": "object",
						"description": "Box summary provides the counters of how many responses out of the total have filled this specific field, to be able to show this information on render.",
						"properties": {
							"count": {
								"description": "How many responses have this specific field. Only for closed ended boxes.",
								"type": "number"
							},
							"total": {
								"description": "Total number of responses for the form.",
								"type": "number"
							},
							"multiple_choice": {
								"type": "object",
								"properties": {
									"has_other": {
										"type": "boolean"
									},
									"is_multiple_selection": {
										"type": "boolean"
									}
								}
							},
							"picture_choice": {
								"type": "object",
								"properties": {
									"has_other": {
										"type": "boolean"
									},
									"is_multiple_selection": {
										"type": "boolean"
									}
								}
							},
							"date": {
								"type": "object",
								"properties": {
									"format": {
										"description": "Shows the date format.",
										"type": "string"
									}
								}
							},
							"rating": {
								"type": "object",
								"properties": {
									"average": {
										"type": "number",
										"format": "float"
									},
									"icon": {
										"type": "string"
									}
								}
							},
							"payment": {
								"type": "object",
								"properties": {
									"currency": {
										"type": "string"
									}
								},
								"example": {
									"currency": "USD"
								}
							}
						},
						"example": {
							"count": 14,
							"total": 50
						}
					},
					"content": {
						"description": "For certain field boxes, the content of the box is in a graphic form. This provides information to render this graphics.",
						"type": "array",
						"items": {
							"type": "object",
							"description": "Box content provides the necessary information to render a field box grpahic in the results panel.",
							"properties": {
								"label": {
									"description": "Label represents the text of the selected choice.",
									"type": "string"
								},
								"value": {
									"description": "Value represent what value has out of the total responses for that field. Is used to show extra information on hover.",
									"type": "number"
								},
								"percentage": {
									"description": "Number representing the percentage of the responses belonging to that choice.",
									"type": "number",
									"format": "float"
								},
								"picture_choice": {
									"type": "object",
									"properties": {
										"image_url": {
											"type": "string"
										}
									}
								},
								"opinion_scale": {
									"type": "object",
									"properties": {
										"left": {
											"type": "string"
										},
										"center": {
											"type": "string"
										},
										"right": {
											"type": "string"
										}
									},
									"example": {
										"left": "Super low",
										"center": "Not so bad",
										"right": "Superb"
									}
								}
							},
							"example": {
								"label": "Blue",
								"value": 30,
								"percentage": 15.5
							}
						}
					},
					"group": {
						"type": "object",
						"properties": {
							"boxes": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "Box is the boombox representation of a form field.",
									"properties": {
										"id": {
											"description": "It identifies the box inside the form.",
											"type": "string"
										},
										"ref": {
											"description": "Identifies the box by reference. It is used for piping.",
											"type": "string"
										},
										"type": {
											"description": "It determines the type of the field box to render.",
											"type": "string",
											"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "group", "phone_number"]
										},
										"title": {
											"description": "Title is the text that will show up in the top of the field box.",
											"type": "string"
										},
										"summary": {
											"type": "object",
											"description": "Box summary provides the counters of how many responses out of the total have filled this specific field, to be able to show this information on render.",
											"properties": {
												"count": {
													"description": "How many responses have this specific field. Only for closed ended boxes.",
													"type": "number"
												},
												"total": {
													"description": "Total number of responses for the form.",
													"type": "number"
												},
												"multiple_choice": {
													"type": "object",
													"properties": {
														"has_other": {
															"type": "boolean"
														},
														"is_multiple_selection": {
															"type": "boolean"
														}
													}
												},
												"picture_choice": {
													"type": "object",
													"properties": {
														"has_other": {
															"type": "boolean"
														},
														"is_multiple_selection": {
															"type": "boolean"
														}
													}
												},
												"date": {
													"type": "object",
													"properties": {
														"format": {
															"description": "Shows the date format.",
															"type": "string"
														}
													}
												},
												"rating": {
													"type": "object",
													"properties": {
														"average": {
															"type": "number",
															"format": "float"
														},
														"icon": {
															"type": "string"
														}
													}
												},
												"payment": {
													"type": "object",
													"properties": {
														"currency": {
															"type": "string"
														}
													},
													"example": {
														"currency": "USD"
													}
												}
											},
											"example": {
												"count": 14,
												"total": 50
											}
										},
										"content": {
											"description": "For certain field boxes, the content of the box is in a graphic form. This provides information to render this graphics.",
											"type": "array",
											"items": {
												"type": "object",
												"description": "Box content provides the necessary information to render a field box grpahic in the results panel.",
												"properties": {
													"label": {
														"description": "Label represents the text of the selected choice.",
														"type": "string"
													},
													"value": {
														"description": "Value represent what value has out of the total responses for that field. Is used to show extra information on hover.",
														"type": "number"
													},
													"percentage": {
														"description": "Number representing the percentage of the responses belonging to that choice.",
														"type": "number",
														"format": "float"
													},
													"picture_choice": {
														"type": "object",
														"properties": {
															"image_url": {
																"type": "string"
															}
														}
													},
													"opinion_scale": {
														"type": "object",
														"properties": {
															"left": {
																"type": "string"
															},
															"center": {
																"type": "string"
															},
															"right": {
																"type": "string"
															}
														},
														"example": {
															"left": "Super low",
															"center": "Not so bad",
															"right": "Superb"
														}
													}
												},
												"example": {
													"label": "Blue",
													"value": 30,
													"percentage": 15.5
												}
											}
										}
									},
									"example": {
										"id": "aBcDe",
										"type": "default",
										"title": "What is your name?"
									}
								}
							}
						}
					}
				},
				"example": {
					"id": "aBcDe",
					"type": "default",
					"title": "What is your name?"
				}
			}
		},
		"Metrics": {
			"type": "object",
			"description": "Metrics aggregates counters and calculations for the results of a specific form. It provides both aggregates per platform and a global summary.",
			"properties": {
				"summary": {
					"type": "object",
					"description": "Summary is global counters aggregate of the whole results set of a form.",
					"properties": {
						"responses_count": {
							"description": "Total of responses received.",
							"type": "number"
						},
						"completion_rate": {
							"description": "Completion rate. The number represents a percentage.",
							"type": "number"
						},
						"average_time": {
							"description": "Average completion time in milliseconds.",
							"type": "number"
						}
					},
					"example": {
						"response_count": 100,
						"completion_rate": 45.5,
						"average_time": 56000
					}
				},
				"platforms": {
					"description": "Platforms is a collection of platform specific metrics.",
					"type": "array",
					"items": {
						"type": "object",
						"description": "Metrics platform shows the specific metrics aggregates for a specific platform.",
						"properties": {
							"platform": {
								"description": "The name of the platform.",
								"type": "string",
								"enum": ["desktop", "other", "mobile"]
							},
							"responses_count": {
								"description": "Total of responses received.",
								"type": "number"
							},
							"completion_rate": {
								"description": "Completion rate. The number represents a percentage.",
								"type": "number"
							},
							"average_time": {
								"description": "Average completion time in milliseconds.",
								"type": "number"
							}
						},
						"example": {
							"platform": "desktop",
							"response_count": 100,
							"completion_rate": 45.5,
							"average_time": 56000
						}
					}
				}
			}
		},
		"BoxResponses": {
			"type": "object",
			"description": "BoxResponses is a collection of responses for a given box, plus a summary for requesting the next page.",
			"properties": {
				"page": {
					"type": "object",
					"description": "Page is a set of data to request the next page of a list of responses.",
					"properties": {
						"count": {
							"type": "number",
							"description": "Total number of responses for this field"
						},
						"next_until": {
							"type": "number",
							"description": "Next until is the timestamp for starting pulling the next page. When the requested page is the latest, this property will not appear."
						}
					},
					"example": {
						"count": 10,
						"next_until": 1502362013
					}
				}
			}
		},
		"Report": {
			"type": "object",
			"description": "Get report share data for a given form.",
			"properties": {
				"id": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"has_design": {
					"type": "boolean"
				}
			}
		},
		"Responses": {
			"type": "object",
			"description": "Responses is a collection of responses for a given box, plus a summary for requesting the next page.",
			"properties": {
				"page": {
					"type": "object",
					"description": "Page is a set of data to request the next page of a list of responses.",
					"properties": {
						"next_until": {
							"type": "number",
							"description": "Next until is the timestamp for start pulling the next page. When the requested page is the latest, this property will not appear."
						},
						"next_since": {
							"type": "number",
							"description": "Next since is the timestamp for start pulling the next page when order is asc. When the requested page is the latest, this property will not appear."
						},
						"next_page": {
							"type": "number",
							"description": "Next page is the number of the following page when sorting by field. When the requested page is the latest, this property will not appear."
						}
					},
					"example": {
						"next_until": 1502362013
					}
				}
			}
		},
		"ViewResponses": {
			"type": "array",
			"items": {
				"type": "object",
				"description": "ViewResponse is the detailed view of a specific response.",
				"properties": {
					"submitted_at": {
						"type": "number"
					},
					"token": {
						"type": "string"
					},
					"hidden": {
						"type": "array",
						"items": {
							"type": "object",
							"description": "ViewHidden is a list of answered hidden fields.",
							"properties": {
								"name": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"score": {
						"description": "Answered value for the score.",
						"type": "number"
					},
					"answers": {
						"description": "List of answers.",
						"type": "array",
						"items": {
							"type": "object",
							"description": "ViewResponseAnswer an answers for a specific field and submission.",
							"properties": {
								"id": {
									"description": "It identifies the box.",
									"type": "string"
								},
								"ref": {
									"description": "Identifies the box by reference. It is used for piping.",
									"type": "string"
								},
								"type": {
									"description": "It determines the type of the field box to render.",
									"type": "string",
									"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "group", "phone_number"]
								},
								"title": {
									"description": "Title is the text that will show up in the top of the field box.",
									"type": "string"
								},
								"multiple_choice": {
									"type": "object",
									"description": "ViewResponse is the detailed view of a specific response.",
									"properties": {
										"choices": {
											"description": "List of answered choices.",
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"other": {
											"type": "string"
										}
									}
								},
								"picture_choice": {
									"type": "object",
									"description": "ViewResponse is the detailed view of a specific response.",
									"properties": {
										"choices": {
											"description": "List of answered choices.",
											"type": "array",
											"items": {
												"type": "object",
												"description": "ViewResponse is the detailed view of a specific response.",
												"properties": {
													"choice": {
														"type": "string"
													},
													"image_url": {
														"type": "string"
													}
												}
											}
										},
										"other": {
											"type": "string"
										}
									}
								},
								"date": {
									"type": "object",
									"properties": {
										"timestamp": {
											"type": "number"
										},
										"format": {
											"type": "string"
										}
									}
								},
								"yes_no": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"legal": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"opinion_scale": {
									"type": "object",
									"properties": {
										"value": {
											"type": "number"
										},
										"total": {
											"type": "number"
										}
									}
								},
								"rating": {
									"type": "object",
									"properties": {
										"value": {
											"type": "number"
										},
										"total": {
											"type": "number"
										}
									}
								},
								"dropdown": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"payment": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"last4": {
											"type": "string"
										},
										"is_paid": {
											"type": "boolean"
										},
										"amount": {
											"type": "string"
										},
										"currency": {
											"type": "string"
										}
									},
									"example": {
										"name": "John Doe",
										"last4": "1234",
										"is_paid": true,
										"amount": "12345",
										"currency": "USD"
									}
								},
								"website": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"file_upload": {
									"type": "object",
									"properties": {
										"file_url": {
											"type": "string"
										},
										"file_name": {
											"type": "string"
										},
										"thumbnail_url": {
											"description": "thumbnail_url will be returned only if the file has an image extension (jpg, jpeg, gif, png)",
											"type": "string"
										}
									},
									"example": {
										"file_url": "https://api.typeform.com/forms/XdjfXL/responses/7f46165474d11ee5836777d85df2cdab/fields/MGJHuy2hN06C/files/somePicture.jpg",
										"file_name": "somePicture.jpg",
										"thumbnail_url": "https://api.typeform.com/forms/XdjfXL/responses/7f46165474d11ee5836777d85df2cdab/fields/MGJHuy2hN06C/files/ssomePicture.jpg"
									}
								},
								"number": {
									"type": "object",
									"properties": {
										"value": {
											"type": "number"
										}
									}
								},
								"email": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"long_text": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"short_text": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"phone_number": {
									"type": "object",
									"properties": {
										"value": {
											"type": "string"
										}
									}
								},
								"group": {
									"type": "object",
									"properties": {
										"title": {
											"type": "string"
										},
										"answers": {
											"description": "List of answers inside a group.",
											"type": "array",
											"items": {
												"type": "object",
												"description": "Box is the boombox representation of a form field.",
												"properties": {
													"id": {
														"description": "It identifies the box.",
														"type": "string"
													},
													"ref": {
														"description": "Identifies the box by reference. It is used for piping.",
														"type": "string"
													},
													"type": {
														"description": "It determines the type of the field box to render.",
														"type": "string",
														"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "phone_number"]
													},
													"title": {
														"description": "Title is the text that will show up in the top of the field box.",
														"type": "string"
													},
													"multiple_choice": {
														"type": "object",
														"description": "ViewResponse is the detailed view of a specific response.",
														"properties": {
															"choices": {
																"description": "List of answered choices.",
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"other": {
																"type": "string"
															}
														}
													},
													"picture_choice": {
														"type": "object",
														"description": "ViewResponse is the detailed view of a specific response.",
														"properties": {
															"choices": {
																"description": "List of answered choices.",
																"type": "array",
																"items": {
																	"type": "object",
																	"description": "ViewResponse is the detailed view of a specific response.",
																	"properties": {
																		"choice": {
																			"type": "string"
																		},
																		"image_url": {
																			"type": "string"
																		}
																	}
																}
															},
															"other": {
																"type": "string"
															}
														}
													},
													"date": {
														"type": "object",
														"properties": {
															"timestamp": {
																"type": "number"
															},
															"format": {
																"type": "string"
															}
														}
													},
													"yes_no": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"legal": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"opinion_scale": {
														"type": "object",
														"properties": {
															"value": {
																"type": "number"
															},
															"total": {
																"type": "number"
															}
														}
													},
													"rating": {
														"type": "object",
														"properties": {
															"value": {
																"type": "number"
															},
															"total": {
																"type": "number"
															}
														}
													},
													"dropdown": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"payment": {
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															},
															"last4": {
																"type": "string"
															},
															"is_paid": {
																"type": "boolean"
															},
															"amount": {
																"type": "string"
															},
															"currency": {
																"type": "string"
															}
														},
														"example": {
															"name": "John Doe",
															"last4": "1234",
															"is_paid": true,
															"amount": "12345",
															"currency": "USD"
														}
													},
													"website": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"file_upload": {
														"type": "object",
														"properties": {
															"file_url": {
																"type": "string"
															},
															"file_name": {
																"type": "string"
															},
															"thumbnail_url": {
																"description": "thumbnail_url will be returned only if the file has an image extension (jpg, jpeg, gif, png)",
																"type": "string"
															}
														},
														"example": {
															"file_url": "https://api.typeform.com/forms/XdjfXL/responses/7f46165474d11ee5836777d85df2cdab/fields/MGJHuy2hN06C/files/somePicture.jpg",
															"file_name": "somePicture.jpg",
															"thumbnail_url": "https://api.typeform.com/forms/XdjfXL/responses/7f46165474d11ee5836777d85df2cdab/fields/MGJHuy2hN06C/files/ssomePicture.jpg"
														}
													},
													"number": {
														"type": "object",
														"properties": {
															"value": {
																"type": "number"
															}
														}
													},
													"email": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"long_text": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"short_text": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													},
													"phone_number": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string"
															}
														}
													}
												},
												"example": {
													"id": "aBcDe",
													"type": "default",
													"title": "What is your name?"
												}
											}
										}
									}
								}
							},
							"example": {
								"id": "aBcDe",
								"type": "default",
								"title": "What is your name?"
							}
						}
					}
				}
			}
		},
		"Fields": {
			"type": "array",
			"items": {
				"type": "object",
				"description": "Field is a item containing necessary information to filter a responses list request.",
				"properties": {
					"id": {
						"description": "It identifies the box inside the form.",
						"type": "string"
					},
					"type": {
						"description": "It determines the type of the field box to render.",
						"type": "string",
						"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "group", "phone_number"]
					},
					"title": {
						"description": "Title is the text that will show up in the top of the field box.",
						"type": "string"
					},
					"group": {
						"description": "If the field is a group, the specifics of this type will be inside this object.",
						"type": "object",
						"properties": {
							"fields": {
								"description": "List of grouped fields",
								"type": "array",
								"items": {
									"type": "object",
									"description": "Field is a item containing necessary information to filter a responses list request.",
									"properties": {
										"id": {
											"description": "It identifies the box inside the form.",
											"type": "string"
										},
										"type": {
											"description": "It determines the type of the field box to render.",
											"type": "string",
											"enum": ["multiple_choice", "picture_choice", "date", "yes_no", "legal", "opinion_scale", "rating", "dropdown", "payment", "website", "file_upload", "number", "email", "long_text", "short_text", "phone_number"]
										},
										"title": {
											"description": "Title is the text that will show up in the top of the field box.",
											"type": "string"
										}
									},
									"example": {
										"id": "aBcDe",
										"type": "default",
										"title": "What is your name?"
									}
								}
							}
						}
					}
				},
				"example": {
					"id": "aBcDe",
					"type": "default",
					"title": "What is your name?"
				}
			}
		},
		"Destinations": {
			"type": "object",
			"required": ["user_id", "token", "metadata"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"token": {
					"type": "string",
					"example": "1bc29b36f623ba82aaf6724fd3b1671"
				},
				"metadata": {
					"type": "object",
					"example": {
						"data_center": "us15"
					}
				}
			}
		},
		"DestinationsResponse": {
			"type": "object",
			"required": ["items"],
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["id", "name"],
						"properties": {
							"id": {
								"type": "string",
								"example": "01CP2WM7EK7W4G7M2M73K69SHT"
							},
							"name": {
								"type": "string",
								"example": "Marketing campaign August 2018"
							}
						}
					}
				}
			}
		},
		"Destination": {
			"type": "object",
			"required": ["id", "name"],
			"properties": {
				"id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"name": {
					"type": "string",
					"example": "Marketing campaign August 2018"
				}
			}
		},
		"UserAuthorized": {
			"type": "object",
			"required": ["user_id", "token"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"token": {
					"type": "string",
					"example": "1bc29b36f623ba82aaf6724fd3b1671"
				}
			}
		},
		"UserInfo": {
			"type": "object",
			"required": ["user_label"],
			"properties": {
				"user_label": {
					"type": "string",
					"example": "user@third-party-service.com"
				},
				"metadata": {
					"type": "object",
					"example": {
						"data_center": "us15"
					}
				}
			}
		},
		"DestinationFields": {
			"type": "object",
			"required": ["user_id", "token", "metadata", "destination_id"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"token": {
					"type": "string",
					"example": "1bc29b36f623ba82aaf6724fd3b1671"
				},
				"metadata": {
					"type": "object",
					"example": {
						"data_center": "us15"
					}
				},
				"destination_id": {
					"type": "string",
					"example": "42"
				}
			}
		},
		"FieldsResponse": {
			"type": "object",
			"required": ["items"],
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["id", "type", "provider_type", "required", "label"],
						"properties": {
							"id": {
								"type": "string",
								"example": "01CP2WM7EK7W4G7M2M73K69SHT"
							},
							"type": {
								"type": "string",
								"example": "short_text"
							},
							"provider_type": {
								"type": "string",
								"example": "textfield"
							},
							"required": {
								"type": "boolean",
								"example": true
							},
							"label": {
								"type": "string",
								"example": "First name"
							}
						}
					}
				}
			}
		},
		"DestinationField": {
			"type": "object",
			"required": ["id", "type", "provider_type", "required", "label"],
			"properties": {
				"id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"type": {
					"type": "string",
					"example": "short_text"
				},
				"provider_type": {
					"type": "string",
					"example": "textfield"
				},
				"required": {
					"type": "boolean",
					"example": true
				},
				"label": {
					"type": "string",
					"example": "First name"
				}
			}
		},
		"Setup": {
			"type": "object",
			"required": ["user_id", "token", "destination", "data"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"token": {
					"type": "string",
					"example": "1bc29b36f623ba82aaf6724fd3b1671"
				},
				"destination": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"example": "42"
						},
						"name": {
							"type": "string",
							"example": "abc123"
						}
					}
				},
				"data": {
					"type": "object",
					"required": ["event_id", "event_type", "form_response"],
					"properties": {
						"event_id": {
							"type": "string",
							"example": "LtWXD3crgy"
						},
						"event_type": {
							"type": "string",
							"example": "form_response"
						},
						"form_response": {
							"type": "object",
							"required": ["form_id", "token", "submitted_at", "landed_at", "answers", "calculated"],
							"properties": {
								"form_id": {
									"type": "string",
									"example": "lT4Z3j"
								},
								"token": {
									"type": "string",
									"example": "a3a12ec67a1365927098a606107fac15"
								},
								"submitted_at": {
									"type": "string",
									"example": "2018-01-18T18:17:02Z"
								},
								"landed_at": {
									"type": "string",
									"example": "2018-01-18T18:07:02Z"
								},
								"answers": {
									"type": "array",
									"items": {
										"type": "object",
										"required": ["type", "text", "field"],
										"properties": {
											"type": {
												"type": "string",
												"example": "text"
											},
											"text": {
												"type": "string",
												"example": "It's cold right now! I live in an older medium-sized city with a university. Geographically, the area is hilly."
											},
											"field": {
												"type": "object",
												"required": ["id", "type"],
												"properties": {
													"id": {
														"type": "string",
														"example": "DlXFaesGBpoF"
													},
													"type": {
														"type": "string",
														"example": "long_text"
													},
													"ref": {
														"type": "string",
														"example": "my_ref"
													}
												}
											}
										}
									}
								},
								"calculated": {
									"type": "object",
									"required": ["score"],
									"properties": {
										"score": {
											"type": "integer",
											"example": 9
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"SetupErrorResponse": {
			"type": "object",
			"required": ["message"],
			"properties": {
				"message": {
					"type": "string",
					"example": "An error occurred."
				}
			}
		},
		"Mappings": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["typeform_field", "provider_field"],
				"properties": {
					"typeform_field": {
						"type": "object",
						"required": ["id"],
						"properties": {
							"id": {
								"type": "string",
								"example": "abc123"
							}
						}
					},
					"provider_field": {
						"type": "object",
						"required": ["id"],
						"properties": {
							"id": {
								"type": "string",
								"example": "abc123"
							},
							"type": {
								"type": "string",
								"example": "abc123"
							}
						}
					}
				}
			}
		},
		"Mapping": {
			"type": "object",
			"required": ["typeform_field", "provider_field"],
			"properties": {
				"typeform_field": {
					"type": "object",
					"required": ["id"],
					"properties": {
						"id": {
							"type": "string",
							"example": "abc123"
						}
					}
				},
				"provider_field": {
					"type": "object",
					"required": ["id"],
					"properties": {
						"id": {
							"type": "string",
							"example": "abc123"
						},
						"type": {
							"type": "string",
							"example": "abc123"
						}
					}
				}
			}
		},
		"TypeformField": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"id": {
					"type": "string",
					"example": "abc123"
				}
			}
		},
		"ProviderField": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"id": {
					"type": "string",
					"example": "abc123"
				},
				"type": {
					"type": "string",
					"example": "abc123"
				}
			}
		},
		"Submission": {
			"type": "object",
			"required": ["event_id", "event_type", "form_response"],
			"properties": {
				"event_id": {
					"type": "string",
					"example": "LtWXD3crgy"
				},
				"event_type": {
					"type": "string",
					"example": "form_response"
				},
				"form_response": {
					"type": "object",
					"required": ["form_id", "token", "submitted_at", "landed_at", "answers", "calculated"],
					"properties": {
						"form_id": {
							"type": "string",
							"example": "lT4Z3j"
						},
						"token": {
							"type": "string",
							"example": "a3a12ec67a1365927098a606107fac15"
						},
						"submitted_at": {
							"type": "string",
							"example": "2018-01-18T18:17:02Z"
						},
						"landed_at": {
							"type": "string",
							"example": "2018-01-18T18:07:02Z"
						},
						"answers": {
							"type": "array",
							"items": {
								"type": "object",
								"required": ["type", "text", "field"],
								"properties": {
									"type": {
										"type": "string",
										"example": "text"
									},
									"text": {
										"type": "string",
										"example": "It's cold right now! I live in an older medium-sized city with a university. Geographically, the area is hilly."
									},
									"field": {
										"type": "object",
										"required": ["id", "type"],
										"properties": {
											"id": {
												"type": "string",
												"example": "DlXFaesGBpoF"
											},
											"type": {
												"type": "string",
												"example": "long_text"
											},
											"ref": {
												"type": "string",
												"example": "my_ref"
											}
										}
									}
								}
							}
						},
						"calculated": {
							"type": "object",
							"required": ["score"],
							"properties": {
								"score": {
									"type": "integer",
									"example": 9
								}
							}
						}
					}
				}
			}
		},
		"Answer": {
			"type": "object",
			"required": ["type", "text", "field"],
			"properties": {
				"type": {
					"type": "string",
					"example": "text"
				},
				"text": {
					"type": "string",
					"example": "It's cold right now! I live in an older medium-sized city with a university. Geographically, the area is hilly."
				},
				"field": {
					"type": "object",
					"required": ["id", "type"],
					"properties": {
						"id": {
							"type": "string",
							"example": "DlXFaesGBpoF"
						},
						"type": {
							"type": "string",
							"example": "long_text"
						},
						"ref": {
							"type": "string",
							"example": "my_ref"
						}
					}
				}
			}
		},
		"AnswerField": {
			"type": "object",
			"required": ["id", "type"],
			"properties": {
				"id": {
					"type": "string",
					"example": "DlXFaesGBpoF"
				},
				"type": {
					"type": "string",
					"example": "long_text"
				},
				"ref": {
					"type": "string",
					"example": "my_ref"
				}
			}
		},
		"FormResponse": {
			"type": "object",
			"required": ["form_id", "token", "submitted_at", "landed_at", "answers", "calculated"],
			"properties": {
				"form_id": {
					"type": "string",
					"example": "lT4Z3j"
				},
				"token": {
					"type": "string",
					"example": "a3a12ec67a1365927098a606107fac15"
				},
				"submitted_at": {
					"type": "string",
					"example": "2018-01-18T18:17:02Z"
				},
				"landed_at": {
					"type": "string",
					"example": "2018-01-18T18:07:02Z"
				},
				"answers": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["type", "text", "field"],
						"properties": {
							"type": {
								"type": "string",
								"example": "text"
							},
							"text": {
								"type": "string",
								"example": "It's cold right now! I live in an older medium-sized city with a university. Geographically, the area is hilly."
							},
							"field": {
								"type": "object",
								"required": ["id", "type"],
								"properties": {
									"id": {
										"type": "string",
										"example": "DlXFaesGBpoF"
									},
									"type": {
										"type": "string",
										"example": "long_text"
									},
									"ref": {
										"type": "string",
										"example": "my_ref"
									}
								}
							}
						}
					}
				},
				"calculated": {
					"type": "object",
					"required": ["score"],
					"properties": {
						"score": {
							"type": "integer",
							"example": 9
						}
					}
				}
			}
		},
		"Calculated": {
			"type": "object",
			"required": ["score"],
			"properties": {
				"score": {
					"type": "integer",
					"example": 9
				}
			}
		},
		"Definition": {
			"type": "object",
			"required": ["id", "title", "fields"],
			"properties": {
				"id": {
					"type": "string",
					"example": "lT4Z3j"
				},
				"title": {
					"type": "string",
					"example": "Webhooks example"
				},
				"fields": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["id", "title", "type", "ref", "allow_multiple_selections", "allow_other_choice"],
						"properties": {
							"id": {
								"type": "string",
								"example": "DlXFaesGBpoF"
							},
							"title": {
								"type": "string",
								"example": "Thanks, {{answer_60906475}}! What's it like where you live? Tell us in a few sentences."
							},
							"type": {
								"type": "string",
								"example": "long_text"
							},
							"ref": {
								"type": "string",
								"example": "readable_ref_long_text"
							},
							"allow_multiple_selections": {
								"type": "boolean",
								"example": false
							},
							"allow_other_choice": {
								"type": "boolean",
								"example": false
							}
						}
					}
				}
			}
		},
		"DefinitionField": {
			"type": "object",
			"required": ["id", "title", "type", "ref", "allow_multiple_selections", "allow_other_choice"],
			"properties": {
				"id": {
					"type": "string",
					"example": "DlXFaesGBpoF"
				},
				"title": {
					"type": "string",
					"example": "Thanks, {{answer_60906475}}! What's it like where you live? Tell us in a few sentences."
				},
				"type": {
					"type": "string",
					"example": "long_text"
				},
				"ref": {
					"type": "string",
					"example": "readable_ref_long_text"
				},
				"allow_multiple_selections": {
					"type": "boolean",
					"example": false
				},
				"allow_other_choice": {
					"type": "boolean",
					"example": false
				}
			}
		},
		"UserDeauthorized": {
			"type": "object",
			"required": ["user_id"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				}
			}
		},
		"Response": {
			"type": "object",
			"properties": {
				"typeform_field_id": {
					"type": "string",
					"example": "12k3j24"
				},
				"provider_field_id": {
					"type": "string",
					"example": "name"
				},
				"value": {
					"type": "string",
					"example": "foo"
				},
				"type": {
					"type": "string",
					"example": "string"
				}
			}
		},
		"BackfillingResponses": {
			"type": "object",
			"properties": {
				"conditional_responses": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"typeform_field_id": {
								"type": "string",
								"example": "12k3j24"
							},
							"provider_field_id": {
								"type": "string",
								"example": "name"
							},
							"value": {
								"type": "string",
								"example": "foo"
							},
							"type": {
								"type": "string",
								"example": "string"
							}
						}
					}
				}
			}
		},
		"Backfilling": {
			"type": "object",
			"required": ["user_id", "token", "destination", "responses"],
			"properties": {
				"user_id": {
					"type": "string",
					"example": "01CP2WM7EK7W4G7M2M73K69SHT"
				},
				"token": {
					"type": "string",
					"example": "1bc29b36f623ba82aaf6724fd3b1671"
				},
				"metadata": {
					"type": "object",
					"example": {
						"data_center": "us15"
					}
				},
				"destination": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"example": "42"
						},
						"name": {
							"type": "string",
							"example": "abc123"
						}
					}
				}
			}
		},
		"Delete": {
			"type": "object",
			"required": ["token", "form_id", "destination_id"],
			"properties": {
				"token": {
					"type": "string",
					"example": "a3a12ec67a1365927098a606107fac15"
				},
				"form_id": {
					"type": "string",
					"example": "lT4Z3j"
				},
				"destination_id": {
					"type": "string",
					"example": "42"
				}
			}
		},
		"TestIntegrationResponse": {
			"type": "object",
			"properties": {
				"integration_id": {
					"type": "string"
				},
				"destination": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"portal_id": {
							"type": "number"
						}
					}
				},
				"backfill_possible": {
					"type": "boolean"
				}
			},
			"example": {
				"integration_id": "01CVSB08NBQ6HYQFG8Q3DF4JVQ",
				"destination": {
					"id": "1b9Thh6vnboLETYNg6rpx0e5qtM3UrQkx7gRZKGuHpWY",
					"name": "test",
					"portal_id": 1
				},
				"backfill_possible": false
			}
		},
		"BaseDestinationRequest": {
			"type": "object",
			"properties": {
				"authorization_id": {
					"type": "string",
					"description": "Authorization id to use to get the list of destinations in the provider."
				},
				"provider_id": {
					"type": "string",
					"description": "Unique id of the provider. The provider of the use case including the API version(e.g. mailchimpv3, trellov1, etc.)."
				},
				"use_case_id": {
					"type": "string",
					"description": "The use case of the integration in snake case(e.g. add_contact, add_card). These constants will be defined by us and will not need to match with any external definition. TDB the different types."
				},
				"destination": {
					"type": "object",
					"description": "Here you'll define which destination is the customer choosing so this endpoint returns the resources related to it.",
					"properties": {
						"id": {
							"type": "string",
							"description": "Unique identifier for the destination. E.x. for Mailchimp this is the id of the list which to add contacts to."
						},
						"destination": {
							"type": "string",
							"description": "Could be **optional**. This is actually a nested Destination object, used to specify  sub-destinations."
						}
					},
					"example": {
						"id": "list_abc_123",
						"destination": null
					}
				}
			}
		},
		"V1FormDescription": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"fields": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string"
							},
							"title": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"choices": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "number",
											"format": "integer"
										},
										"label": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			},
			"example": {
				"id": "12345",
				"title": "Demographic survey",
				"fields": [{
					"id": "abcd",
					"type": "dropdown",
					"title": "What sector do you work in?"
				}, {
					"id": "jklm",
					"type": "list",
					"title": "What pets do you have?",
					"choices": [{
						"id": 1,
						"label": "dog"
					}, {
						"id": 2,
						"label": "cat"
					}]
				}]
			}
		},
		"V1FormFields": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"choices": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "number",
								"format": "integer"
							},
							"label": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"V1FormMultipleChoices": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number",
					"format": "integer"
				},
				"label": {
					"type": "string"
				}
			}
		},
		"CountryCodes": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string",
						"description": "A country code",
						"format": "ISO 3166-1 Alpha-2",
						"example": "AD"
					}
				}
			}
		},
		"CountryCode": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string",
					"description": "A country code",
					"format": "ISO 3166-1 Alpha-2",
					"example": "AD"
				}
			}
		},
		"IsoCountryCode": {
			"type": "string",
			"description": "A country code",
			"format": "ISO 3166-1 Alpha-2",
			"example": "AD"
		},
		"Prices": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the pricing plan",
						"example": "123asd"
					},
					"plan_name": {
						"type": "string",
						"description": "The name of a plan",
						"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
						"example": "essentials"
					},
					"period": {
						"type": "string",
						"description": "The amount of time a subscription period lasts",
						"format": "Duration in ISO-8601",
						"enum": ["P1M", "P1Y"],
						"example": "P1M"
					},
					"charge_model": {
						"type": "string",
						"description": "Determines how charges are calculated",
						"example": "fixed",
						"enum": ["fixed", "tiered"]
					},
					"price": {
						"type": "object",
						"properties": {
							"currency": {
								"type": "object",
								"description": "Currency information",
								"properties": {
									"code": {
										"type": "string",
										"description": "Code that uniquely identifies a currency",
										"format": "ISO-4217",
										"example": "EUR"
									}
								}
							},
							"amount": {
								"type": "integer",
								"example": 100
							},
							"scale": {
								"type": "integer",
								"description": "Number of digits to the right of the decimal point in `amount`",
								"example": 2
							}
						}
					},
					"addons": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string",
									"format": "ULID",
									"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
								},
								"type": {
									"type": "string",
									"enum": ["members_seats"]
								},
								"charge_model": {
									"example": "tiered",
									"type": "string",
									"description": "Determines how charges are calculated",
									"enum": ["fixed", "tiered"]
								},
								"tiers": {
									"type": "array",
									"items": {
										"type": "object",
										"required": ["from", "price"],
										"properties": {
											"from": {
												"type": "number",
												"description": "Minimum number of unit which the tier applies(inclusive)."
											},
											"to": {
												"type": "number",
												"description": "Maximum number of unit which the tier applies(inclusive). It can be null."
											},
											"price": {
												"type": "object",
												"properties": {
													"currency": {
														"type": "object",
														"description": "Currency information",
														"properties": {
															"code": {
																"type": "string",
																"description": "Code that uniquely identifies a currency",
																"format": "ISO-4217",
																"example": "EUR"
															}
														}
													},
													"amount": {
														"type": "integer",
														"example": 100
													},
													"scale": {
														"type": "integer",
														"description": "Number of digits to the right of the decimal point in `amount`",
														"example": 2
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"PricingPlan": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "A unique identifier for the pricing plan",
					"example": "123asd"
				},
				"plan_name": {
					"type": "string",
					"description": "The name of a plan",
					"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
					"example": "essentials"
				},
				"period": {
					"type": "string",
					"description": "The amount of time a subscription period lasts",
					"format": "Duration in ISO-8601",
					"enum": ["P1M", "P1Y"],
					"example": "P1M"
				},
				"charge_model": {
					"type": "string",
					"description": "Determines how charges are calculated",
					"example": "fixed",
					"enum": ["fixed", "tiered"]
				},
				"price": {
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				},
				"addons": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "ULID",
								"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
							},
							"type": {
								"type": "string",
								"enum": ["members_seats"]
							},
							"charge_model": {
								"example": "tiered",
								"type": "string",
								"description": "Determines how charges are calculated",
								"enum": ["fixed", "tiered"]
							},
							"tiers": {
								"type": "array",
								"items": {
									"type": "object",
									"required": ["from", "price"],
									"properties": {
										"from": {
											"type": "number",
											"description": "Minimum number of unit which the tier applies(inclusive)."
										},
										"to": {
											"type": "number",
											"description": "Maximum number of unit which the tier applies(inclusive). It can be null."
										},
										"price": {
											"type": "object",
											"properties": {
												"currency": {
													"type": "object",
													"description": "Currency information",
													"properties": {
														"code": {
															"type": "string",
															"description": "Code that uniquely identifies a currency",
															"format": "ISO-4217",
															"example": "EUR"
														}
													}
												},
												"amount": {
													"type": "integer",
													"example": 100
												},
												"scale": {
													"type": "integer",
													"description": "Number of digits to the right of the decimal point in `amount`",
													"example": 2
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"PlanName": {
			"type": "string",
			"description": "The name of a plan",
			"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
			"example": "essentials"
		},
		"Period": {
			"type": "string",
			"description": "The amount of time a subscription period lasts",
			"format": "Duration in ISO-8601",
			"enum": ["P1M", "P1Y"],
			"example": "P1M"
		},
		"Currency": {
			"type": "object",
			"description": "Currency information",
			"properties": {
				"code": {
					"type": "string",
					"description": "Code that uniquely identifies a currency",
					"format": "ISO-4217",
					"example": "EUR"
				}
			}
		},
		"CurrencyCode": {
			"type": "string",
			"description": "Code that uniquely identifies a currency",
			"format": "ISO-4217",
			"example": "EUR"
		},
		"ChargeModel": {
			"type": "string",
			"description": "Determines how charges are calculated",
			"example": "fixed",
			"enum": ["fixed", "tiered"]
		},
		"Price": {
			"type": "object",
			"properties": {
				"currency": {
					"type": "object",
					"description": "Currency information",
					"properties": {
						"code": {
							"type": "string",
							"description": "Code that uniquely identifies a currency",
							"format": "ISO-4217",
							"example": "EUR"
						}
					}
				},
				"amount": {
					"type": "integer",
					"example": 100
				},
				"scale": {
					"type": "integer",
					"description": "Number of digits to the right of the decimal point in `amount`",
					"example": 2
				}
			}
		},
		"SubscriptionRequest": {
			"type": "object",
			"required": ["plan_id"],
			"properties": {
				"plan_id": {
					"type": "string",
					"format": "ULID",
					"example": "01CETTA1Z7RFTEA3XEPSJDHRAT"
				},
				"addons": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["id", "quantity"],
						"properties": {
							"id": {
								"type": "string",
								"format": "ULID",
								"example": "01CETZ7TAD6RAHFB1GNT43SMG8"
							},
							"quantity": {
								"type": "integer",
								"minimum": 0,
								"example": 3
							}
						}
					}
				}
			}
		},
		"SeatsAddonRequest": {
			"type": "object",
			"required": ["id", "quantity"],
			"properties": {
				"id": {
					"type": "string",
					"format": "ULID",
					"example": "01CETZ7TAD6RAHFB1GNT43SMG8"
				},
				"quantity": {
					"type": "integer",
					"minimum": 0,
					"example": 3
				}
			}
		},
		"SeatsAddonPricingPlan": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"format": "ULID",
					"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
				},
				"type": {
					"type": "string",
					"enum": ["members_seats"]
				},
				"charge_model": {
					"example": "tiered",
					"type": "string",
					"description": "Determines how charges are calculated",
					"enum": ["fixed", "tiered"]
				},
				"tiers": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["from", "price"],
						"properties": {
							"from": {
								"type": "number",
								"description": "Minimum number of unit which the tier applies(inclusive)."
							},
							"to": {
								"type": "number",
								"description": "Maximum number of unit which the tier applies(inclusive). It can be null."
							},
							"price": {
								"type": "object",
								"properties": {
									"currency": {
										"type": "object",
										"description": "Currency information",
										"properties": {
											"code": {
												"type": "string",
												"description": "Code that uniquely identifies a currency",
												"format": "ISO-4217",
												"example": "EUR"
											}
										}
									},
									"amount": {
										"type": "integer",
										"example": 100
									},
									"scale": {
										"type": "integer",
										"description": "Number of digits to the right of the decimal point in `amount`",
										"example": 2
									}
								}
							}
						}
					}
				}
			}
		},
		"Tier": {
			"type": "object",
			"required": ["from", "price"],
			"properties": {
				"from": {
					"type": "number",
					"description": "Minimum number of unit which the tier applies(inclusive)."
				},
				"to": {
					"type": "number",
					"description": "Maximum number of unit which the tier applies(inclusive). It can be null."
				},
				"price": {
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				}
			}
		},
		"BillingDetails": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the company or individual",
					"example": "Typeform"
				},
				"country": {
					"type": "object",
					"properties": {
						"code": {
							"type": "string",
							"description": "A country code",
							"format": "ISO 3166-1 Alpha-2",
							"example": "AD"
						}
					}
				},
				"vat_number": {
					"type": "string",
					"example": "GB123456"
				},
				"street_address": {
					"type": "string",
					"example": "Carrer de Bac de Roda, 163"
				},
				"city": {
					"type": "string",
					"example": "Barcelona"
				},
				"postal_code": {
					"type": "integer",
					"example": "08018"
				}
			}
		},
		"CreditCardPayload": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "Code that uniquely identifies a payment source",
					"example": "01CETZ7TAD6RAHFB1TRE3SMG8"
				},
				"source": {
					"type": "string",
					"enum": ["card"]
				},
				"payload": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "Cardholder's name",
							"example": "John Doe"
						},
						"brand": {
							"type": "string",
							"description": "Brand of the credit card",
							"example": "MasterCard",
							"enum": ["American Express", "Diners Club", "Discover", "JCB", "MasterCard", "UnionPay", "Visa", "or Unknown"]
						},
						"last4": {
							"type": "integer",
							"description": "Last four digits of the credit card",
							"example": 4567
						}
					}
				}
			}
		},
		"PaymentSourceId": {
			"type": "string",
			"description": "Code that uniquely identifies a payment source",
			"example": "01CETZ7TAD6RAHFB1TRE3SMG8"
		},
		"CheckoutRequest": {
			"type": "object",
			"required": ["subscription", "payment_source_id"],
			"properties": {
				"subscription": {
					"type": "object",
					"required": ["plan_id"],
					"properties": {
						"plan_id": {
							"type": "string",
							"format": "ULID",
							"example": "01CETTA1Z7RFTEA3XEPSJDHRAT"
						},
						"addons": {
							"type": "array",
							"items": {
								"type": "object",
								"required": ["id", "quantity"],
								"properties": {
									"id": {
										"type": "string",
										"format": "ULID",
										"example": "01CETZ7TAD6RAHFB1GNT43SMG8"
									},
									"quantity": {
										"type": "integer",
										"minimum": 0,
										"example": 3
									}
								}
							}
						}
					}
				},
				"payment_source_id": {
					"type": "string",
					"description": "Code that uniquely identifies a payment source",
					"example": "01CETZ7TAD6RAHFB1TRE3SMG8"
				},
				"billing_details": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "Name of the company or individual",
							"example": "Typeform"
						},
						"country": {
							"type": "object",
							"properties": {
								"code": {
									"type": "string",
									"description": "A country code",
									"format": "ISO 3166-1 Alpha-2",
									"example": "AD"
								}
							}
						},
						"vat_number": {
							"type": "string",
							"example": "GB123456"
						},
						"street_address": {
							"type": "string",
							"example": "Carrer de Bac de Roda, 163"
						},
						"city": {
							"type": "string",
							"example": "Barcelona"
						},
						"postal_code": {
							"type": "integer",
							"example": "08018"
						}
					}
				},
				"coupon_id": {
					"type": "string",
					"example": "coupon-id"
				}
			}
		},
		"OrderSummaryRequest": {
			"type": "object",
			"required": ["subscription", "billing_details"],
			"properties": {
				"subscription": {
					"type": "object",
					"required": ["plan_id"],
					"properties": {
						"plan_id": {
							"type": "string",
							"format": "ULID",
							"example": "01CETTA1Z7RFTEA3XEPSJDHRAT"
						},
						"addons": {
							"type": "array",
							"items": {
								"type": "object",
								"required": ["id", "quantity"],
								"properties": {
									"id": {
										"type": "string",
										"format": "ULID",
										"example": "01CETZ7TAD6RAHFB1GNT43SMG8"
									},
									"quantity": {
										"type": "integer",
										"minimum": 0,
										"example": 3
									}
								}
							}
						}
					}
				},
				"billing_details": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "Name of the company or individual",
							"example": "Typeform"
						},
						"country": {
							"type": "object",
							"properties": {
								"code": {
									"type": "string",
									"description": "A country code",
									"format": "ISO 3166-1 Alpha-2",
									"example": "AD"
								}
							}
						},
						"vat_number": {
							"type": "string",
							"example": "GB123456"
						},
						"street_address": {
							"type": "string",
							"example": "Carrer de Bac de Roda, 163"
						},
						"city": {
							"type": "string",
							"example": "Barcelona"
						},
						"postal_code": {
							"type": "integer",
							"example": "08018"
						}
					}
				},
				"coupon_id": {
					"type": "string",
					"example": "coupon-id"
				}
			}
		},
		"Discount": {
			"type": "object",
			"properties": {
				"duration": {
					"type": "string",
					"enum": ["once", "month", "forever"]
				},
				"type": {
					"type": "string",
					"enum": ["amount", "percentage"]
				},
				"amount": {
					"type": "object",
					"description": "It will only be present when type is `amount`",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				},
				"percentage": {
					"type": "integer",
					"description": "It will only be present when type is `percentage`"
				}
			}
		},
		"CouponID": {
			"type": "string",
			"example": "coupon-id"
		},
		"OrderSummaryDiscount": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "coupon-id"
				},
				"type": {
					"type": "string",
					"enum": ["amount", "percentage"]
				},
				"duration": {
					"type": "string",
					"enum": ["once", "forever", "P3M"]
				},
				"amount": {
					"description": "Amount to discount. Only set when `type` is `amount`",
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				},
				"percentage": {
					"description": "Percentage to discount. Only set when `type` is `percentage`",
					"type": "number",
					"example": 0.255
				}
			}
		},
		"OrderSummary": {
			"type": "object",
			"properties": {
				"line_items": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["base_plan"]
							},
							"payload": {
								"type": "object",
								"properties": {
									"plan_id": {
										"type": "string",
										"description": "A unique identifier for the pricing plan",
										"example": "123asd"
									},
									"plan_name": {
										"type": "string",
										"description": "The name of a plan",
										"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
										"example": "essentials"
									},
									"period": {
										"type": "string",
										"description": "The amount of time a subscription period lasts",
										"format": "Duration in ISO-8601",
										"enum": ["P1M", "P1Y"],
										"example": "P1M"
									},
									"charge_model": {
										"type": "string",
										"description": "Determines how charges are calculated",
										"example": "fixed",
										"enum": ["fixed", "tiered"]
									}
								}
							},
							"price": {
								"type": "object",
								"properties": {
									"currency": {
										"type": "object",
										"description": "Currency information",
										"properties": {
											"code": {
												"type": "string",
												"description": "Code that uniquely identifies a currency",
												"format": "ISO-4217",
												"example": "EUR"
											}
										}
									},
									"amount": {
										"type": "integer",
										"example": 100
									},
									"scale": {
										"type": "integer",
										"description": "Number of digits to the right of the decimal point in `amount`",
										"example": 2
									}
								}
							}
						}
					}
				},
				"vat": {
					"type": "object",
					"properties": {
						"type": {
							"description": "How VAT applies to this order. `none` for customers outside of the EU, `included` for individuals inside the EU and customers inside Spain, and `reverse` for non-Spanish companies inside the EU",
							"type": "string",
							"example": "reverse",
							"enum": ["none", "included", "reverse"]
						},
						"rate": {
							"description": "VAT rate to apply, varies between countries. It only applies when the type of vat is either `included` or `reverse`",
							"type": "number",
							"format": "float",
							"example": 0.21
						}
					}
				},
				"renewal": {
					"type": "object",
					"description": "Information about subscription renewal",
					"properties": {
						"period_start": {
							"description": "When the purchased subscription would renew automatically, if no changes to it were made before",
							"type": "string",
							"format": "date-time",
							"example": "2017-07-21T17:32:28.000Z"
						},
						"price": {
							"type": "object",
							"properties": {
								"currency": {
									"type": "object",
									"description": "Currency information",
									"properties": {
										"code": {
											"type": "string",
											"description": "Code that uniquely identifies a currency",
											"format": "ISO-4217",
											"example": "EUR"
										}
									}
								},
								"amount": {
									"type": "integer",
									"example": 100
								},
								"scale": {
									"type": "integer",
									"description": "Number of digits to the right of the decimal point in `amount`",
									"example": 2
								}
							}
						}
					}
				},
				"discount": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"example": "coupon-id"
						},
						"type": {
							"type": "string",
							"enum": ["amount", "percentage"]
						},
						"duration": {
							"type": "string",
							"enum": ["once", "forever", "P3M"]
						},
						"amount": {
							"description": "Amount to discount. Only set when `type` is `amount`",
							"type": "object",
							"properties": {
								"currency": {
									"type": "object",
									"description": "Currency information",
									"properties": {
										"code": {
											"type": "string",
											"description": "Code that uniquely identifies a currency",
											"format": "ISO-4217",
											"example": "EUR"
										}
									}
								},
								"amount": {
									"type": "integer",
									"example": 100
								},
								"scale": {
									"type": "integer",
									"description": "Number of digits to the right of the decimal point in `amount`",
									"example": 2
								}
							}
						},
						"percentage": {
							"description": "Percentage to discount. Only set when `type` is `percentage`",
							"type": "number",
							"example": 0.255
						}
					}
				}
			}
		},
		"BasePlanOrderSummaryLineItem": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["base_plan"]
				},
				"payload": {
					"type": "object",
					"properties": {
						"plan_id": {
							"type": "string",
							"description": "A unique identifier for the pricing plan",
							"example": "123asd"
						},
						"plan_name": {
							"type": "string",
							"description": "The name of a plan",
							"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
							"example": "essentials"
						},
						"period": {
							"type": "string",
							"description": "The amount of time a subscription period lasts",
							"format": "Duration in ISO-8601",
							"enum": ["P1M", "P1Y"],
							"example": "P1M"
						},
						"charge_model": {
							"type": "string",
							"description": "Determines how charges are calculated",
							"example": "fixed",
							"enum": ["fixed", "tiered"]
						}
					}
				},
				"price": {
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				}
			}
		},
		"OrderSummaryVAT": {
			"type": "object",
			"properties": {
				"type": {
					"description": "How VAT applies to this order. `none` for customers outside of the EU, `included` for individuals inside the EU and customers inside Spain, and `reverse` for non-Spanish companies inside the EU",
					"type": "string",
					"example": "reverse",
					"enum": ["none", "included", "reverse"]
				},
				"rate": {
					"description": "VAT rate to apply, varies between countries. It only applies when the type of vat is either `included` or `reverse`",
					"type": "number",
					"format": "float",
					"example": 0.21
				}
			}
		},
		"OrderSummaryRenewal": {
			"type": "object",
			"description": "Information about subscription renewal",
			"properties": {
				"period_start": {
					"description": "When the purchased subscription would renew automatically, if no changes to it were made before",
					"type": "string",
					"format": "date-time",
					"example": "2017-07-21T17:32:28.000Z"
				},
				"price": {
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				}
			}
		},
		"DateTime": {
			"type": "string",
			"format": "date-time",
			"example": "2017-07-21T17:32:28.000Z"
		},
		"CurrentSubscriptionReadModel": {
			"type": "object",
			"description": "Subscription information",
			"properties": {
				"renewal": {
					"type": "object",
					"description": "Subscription information",
					"properties": {
						"plan_name": {
							"type": "string",
							"description": "The name of a plan",
							"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
							"example": "essentials"
						},
						"period": {
							"type": "object",
							"description": "Period of a subscription",
							"properties": {
								"duration": {
									"type": "string",
									"description": "The amount of time a subscription period lasts",
									"format": "Duration in ISO-8601",
									"enum": ["P1M", "P1Y"],
									"example": "P1M"
								},
								"start": {
									"description": "When the period starts",
									"type": "string",
									"format": "date-time",
									"example": "2017-07-21T17:32:28.000Z"
								},
								"end": {
									"description": "When the period ends",
									"type": "string",
									"format": "date-time",
									"example": "2017-07-21T17:32:28.000Z"
								}
							}
						},
						"status": {
							"type": "string",
							"description": "The status of the subscription. It will be ongoing while users don't perform any action that will change the subscription at the end of the current period",
							"enum": ["ongoing", "canceling", "downgrading", "contracting", "upcoming"],
							"example": "ongoing"
						},
						"addons": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"format": "ULID",
										"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
									},
									"type": {
										"type": "string",
										"enum": ["members_seats"]
									},
									"quantity": {
										"type": "integer",
										"minimum": 0,
										"example": 3
									}
								}
							}
						}
					}
				},
				"plan_name": {
					"type": "string",
					"description": "The name of a plan",
					"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
					"example": "essentials"
				},
				"period": {
					"type": "object",
					"description": "Period of a subscription",
					"properties": {
						"duration": {
							"type": "string",
							"description": "The amount of time a subscription period lasts",
							"format": "Duration in ISO-8601",
							"enum": ["P1M", "P1Y"],
							"example": "P1M"
						},
						"start": {
							"description": "When the period starts",
							"type": "string",
							"format": "date-time",
							"example": "2017-07-21T17:32:28.000Z"
						},
						"end": {
							"description": "When the period ends",
							"type": "string",
							"format": "date-time",
							"example": "2017-07-21T17:32:28.000Z"
						}
					}
				},
				"status": {
					"type": "string",
					"description": "The status of the subscription. It will be ongoing while users don't perform any action that will change the subscription at the end of the current period",
					"enum": ["ongoing", "canceling", "downgrading", "contracting", "upcoming"],
					"example": "ongoing"
				},
				"addons": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "ULID",
								"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
							},
							"type": {
								"type": "string",
								"enum": ["members_seats"]
							},
							"quantity": {
								"type": "integer",
								"minimum": 0,
								"example": 3
							}
						}
					}
				}
			}
		},
		"SubscriptionReadModel": {
			"type": "object",
			"description": "Subscription information",
			"properties": {
				"plan_name": {
					"type": "string",
					"description": "The name of a plan",
					"enum": ["free", "essentials", "professional", "premmium", "enterprise"],
					"example": "essentials"
				},
				"period": {
					"type": "object",
					"description": "Period of a subscription",
					"properties": {
						"duration": {
							"type": "string",
							"description": "The amount of time a subscription period lasts",
							"format": "Duration in ISO-8601",
							"enum": ["P1M", "P1Y"],
							"example": "P1M"
						},
						"start": {
							"description": "When the period starts",
							"type": "string",
							"format": "date-time",
							"example": "2017-07-21T17:32:28.000Z"
						},
						"end": {
							"description": "When the period ends",
							"type": "string",
							"format": "date-time",
							"example": "2017-07-21T17:32:28.000Z"
						}
					}
				},
				"status": {
					"type": "string",
					"description": "The status of the subscription. It will be ongoing while users don't perform any action that will change the subscription at the end of the current period",
					"enum": ["ongoing", "canceling", "downgrading", "contracting", "upcoming"],
					"example": "ongoing"
				},
				"addons": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "ULID",
								"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
							},
							"type": {
								"type": "string",
								"enum": ["members_seats"]
							},
							"quantity": {
								"type": "integer",
								"minimum": 0,
								"example": 3
							}
						}
					}
				}
			}
		},
		"Id": {
			"type": "string",
			"format": "ULID",
			"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
		},
		"SubscriptionPeriod": {
			"type": "object",
			"description": "Period of a subscription",
			"properties": {
				"duration": {
					"type": "string",
					"description": "The amount of time a subscription period lasts",
					"format": "Duration in ISO-8601",
					"enum": ["P1M", "P1Y"],
					"example": "P1M"
				},
				"start": {
					"description": "When the period starts",
					"type": "string",
					"format": "date-time",
					"example": "2017-07-21T17:32:28.000Z"
				},
				"end": {
					"description": "When the period ends",
					"type": "string",
					"format": "date-time",
					"example": "2017-07-21T17:32:28.000Z"
				}
			}
		},
		"Duration": {
			"type": "string",
			"description": "The amount of time a subscription period lasts",
			"format": "Duration in ISO-8601",
			"enum": ["P1M", "P1Y"],
			"example": "P1M"
		},
		"SubscriptionStatus": {
			"type": "string",
			"description": "The status of the subscription. It will be ongoing while users don't perform any action that will change the subscription at the end of the current period",
			"enum": ["ongoing", "canceling", "downgrading", "contracting", "upcoming"],
			"example": "ongoing"
		},
		"SeatsAddonReadModel": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"format": "ULID",
					"example": "01CETTA1Z7RFREW3XEPSJDHRAT"
				},
				"type": {
					"type": "string",
					"enum": ["members_seats"]
				},
				"quantity": {
					"type": "integer",
					"minimum": 0,
					"example": 3
				}
			}
		},
		"InvoiceCollection": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"created_at": {
								"type": "object",
								"format": "date-time",
								"example": "2017-07-21T17:32:28.000Z"
							},
							"description": {
								"type": "string",
								"description": "Short description for the invoice",
								"example": "PRO Plan Monthly|Pay as you go (2 credits)"
							},
							"total_amount": {
								"type": "object",
								"properties": {
									"currency": {
										"type": "object",
										"description": "Currency information",
										"properties": {
											"code": {
												"type": "string",
												"description": "Code that uniquely identifies a currency",
												"format": "ISO-4217",
												"example": "EUR"
											}
										}
									},
									"amount": {
										"type": "integer",
										"example": 100
									},
									"scale": {
										"type": "integer",
										"description": "Number of digits to the right of the decimal point in `amount`",
										"example": 2
									}
								}
							},
							"_links": {
								"type": "object",
								"properties": {
									"display": {
										"type": "string",
										"format": "url",
										"example": "https://admin.typeform.com/billing/invoice/in_123"
									}
								}
							}
						}
					}
				},
				"page_count": {
					"type": "integer",
					"description": "Number of pages.",
					"example": 1
				},
				"total_items": {
					"type": "integer",
					"description": "Total number of items in the retrieved collection.",
					"example": 42
				}
			}
		},
		"InvoiceCollectionItem": {
			"type": "object",
			"properties": {
				"created_at": {
					"type": "object",
					"format": "date-time",
					"example": "2017-07-21T17:32:28.000Z"
				},
				"description": {
					"type": "string",
					"description": "Short description for the invoice",
					"example": "PRO Plan Monthly|Pay as you go (2 credits)"
				},
				"total_amount": {
					"type": "object",
					"properties": {
						"currency": {
							"type": "object",
							"description": "Currency information",
							"properties": {
								"code": {
									"type": "string",
									"description": "Code that uniquely identifies a currency",
									"format": "ISO-4217",
									"example": "EUR"
								}
							}
						},
						"amount": {
							"type": "integer",
							"example": 100
						},
						"scale": {
							"type": "integer",
							"description": "Number of digits to the right of the decimal point in `amount`",
							"example": 2
						}
					}
				},
				"_links": {
					"type": "object",
					"properties": {
						"display": {
							"type": "string",
							"format": "url",
							"example": "https://admin.typeform.com/billing/invoice/in_123"
						}
					}
				}
			}
		},
		"InvalidFormatVATNumberResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string",
					"enum": ["INVALID_FORMAT_VAT_NUMBER"]
				}
			}
		},
		"VATServiceUnavailableResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string",
					"enum": ["VAT_SERVICE_UNAVAILABLE"]
				}
			}
		},
		"NonExistentVATNumberResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string",
					"enum": ["NON_EXISTENT_VAT_NUMBER"]
				}
			}
		},
		"CardErrorResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string",
					"description": "A code detailing what went wrong with the given card",
					"enum": ["CARD_DECLINED", "INSUFFICIENT_FUNDS", "INCORRECT_CVC", "EXPIRED_CARD", "PROCESSING_ERROR", "INCORRECT_NUMBER"]
				}
			}
		},
		"UpdateEmailRequest": {
			"type": "object",
			"required": ["new_email", "current_password"],
			"properties": {
				"new_email": {
					"type": "string",
					"format": "email",
					"example": "beardy@typeform.com"
				},
				"current_password": {
					"type": "string",
					"format": "string",
					"example": "supersafe"
				}
			}
		},
		"UpdatePasswordRequest": {
			"type": "object",
			"required": ["new_password", "current_password"],
			"properties": {
				"new_password": {
					"type": "string",
					"format": "string",
					"example": "supersupersafe"
				},
				"current_password": {
					"type": "string",
					"format": "string",
					"example": "supersafe"
				}
			}
		},
		"EmailSettingsRequest": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["category", "is_enabled"],
				"properties": {
					"category": {
						"type": "string",
						"format": "string",
						"example": "educational_comm_opt_in"
					},
					"is_enabled": {
						"type": "boolean",
						"example": true
					}
				}
			}
		},
		"UpdateUserRequest": {
			"type": "object",
			"required": ["name"],
			"properties": {
				"name": {
					"type": "string",
					"format": "string",
					"minLength": 2,
					"maxLength": 128,
					"example": "Beardy Beardinson"
				}
			}
		},
		"UserSettingsUpdateRequest": {
			"type": "object",
			"properties": {
				"autosave": {
					"type": "boolean",
					"format": "boolean",
					"example": true
				},
				"language": {
					"type": "string",
					"enum": ["en", "es"],
					"example": "en"
				}
			}
		},
		"UserResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "integer",
					"example": 2019
				},
				"email": {
					"type": "string",
					"format": "email",
					"example": "beardy@typeform.com"
				},
				"name": {
					"type": "string",
					"format": "string",
					"minLength": 2,
					"maxLength": 128,
					"example": "Beardy Beardinson"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2005-08-15T15:52:01.000Z",
					"description": "The date when the user was created, as returned by PHPs DateTimeInterface::W3C"
				}
			}
		},
		"UserFeatureFlagsResponse": {
			"type": "object",
			"properties": {
				"flagA": {
					"type": "string",
					"example": "control"
				},
				"flagB": {
					"type": "boolean",
					"example": false
				}
			}
		},
		"UserAccountsResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"account_id": {
								"format": "ULID",
								"example": "01D9W9DZ93G5Y9CSK6ADHP79BC"
							},
							"name": {
								"type": "string",
								"example": "Foobar Inc."
							}
						}
					}
				}
			}
		},
		"EmailSettingsResponse": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["category", "is_enabled"],
				"properties": {
					"category": {
						"type": "string",
						"format": "string",
						"example": "educational_comm_opt_in"
					},
					"is_enabled": {
						"type": "boolean",
						"example": true
					}
				}
			}
		},
		"UserSettingsResponse": {
			"type": "object",
			"properties": {
				"autosave": {
					"type": "boolean",
					"format": "boolean",
					"example": true
				},
				"language": {
					"type": "string",
					"enum": ["en", "es"],
					"example": "en"
				}
			}
		},
		"EmptyObjectResponse": {
			"type": "object"
		},
		"EmptyArrayResponse": {
			"type": "array",
			"items": {}
		},
		"UserSettings": {
			"type": "object",
			"properties": {
				"autosave": {
					"type": "boolean",
					"format": "boolean",
					"example": true
				},
				"language": {
					"type": "string",
					"enum": ["en", "es"],
					"example": "en"
				}
			}
		},
		"EmailSettingsItem": {
			"type": "object",
			"required": ["category", "is_enabled"],
			"properties": {
				"category": {
					"type": "string",
					"format": "string",
					"example": "educational_comm_opt_in"
				},
				"is_enabled": {
					"type": "boolean",
					"example": true
				}
			}
		},
		"UserNameItem": {
			"type": "string",
			"format": "string",
			"minLength": 2,
			"maxLength": 128,
			"example": "Beardy Beardinson"
		}
	},
	"paths": {
		"/forms/{form_id}/responses": {
			"get": {
				"tags": ["Responses"],
				"summary": "Retrieve responses",
				"description": "Returns form responses and date and time of form landing and submission.",
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "page_size",
					"in": "query",
					"description": "Maximum number of responses. Default value is **25**. Maximum value is **1000**. If your typeform has fewer than 1000 responses, you can retrieve all of the responses in a single request by adding the `page_size` parameter. If your typeform has more than 1000 responses, use the [`since` and `until`](responses/walkthroughs#use-the-since-and-until-query-parameters-to-retrieve-a-date-range) or [`after`](responses/walkthroughs#use-the-after-query-parameter-to-paginate) query parameters to narrow the scope of your request.",
					"type": "integer",
					"format": "int64"
				}, {
					"name": "since",
					"in": "query",
					"description": "Limit request to responses submitted since the specified date and time. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time. See the [Responses Walkthroughs](/responses/walkthroughs/#use-query-parameters-to-retrieve-specific-data) for an example request that uses the `since` parameter.",
					"type": "string"
				}, {
					"name": "until",
					"in": "query",
					"description": "Limit request to responses submitted until the specified date and time. In ISO 8601 format, UTC time, to the second, with T as a delimiter between the date and time. See the [Responses Walkthroughs](/responses/walkthroughs/#use-query-parameters-to-retrieve-specific-data) for an example request that uses the `until` parameter.",
					"type": "string"
				}, {
					"name": "after",
					"in": "query",
					"description": "Limit request to responses submitted after the specified token. If you use the `after` parameter, the responses will be sorted in the order that our system processed them (instead of the default order, `submitted_at`). This ensures that you can traverse the complete set of responses without repeating entries. See the [Responses Walkthroughs](/responses/walkthroughs/#use-query-parameters-to-retrieve-specific-data) for an example request that uses the `after` parameter.",
					"type": "string"
				}, {
					"name": "before",
					"in": "query",
					"description": "Limit request to responses submitted before the specified token. If you use the `before` parameter, the responses will be sorted in the order that our system processed them (instead of the default order, `submitted_at`). This ensures that you can traverse the complete set of responses without repeating entries.",
					"type": "string"
				}, {
					"name": "included_response_ids",
					"in": "query",
					"description": "Limit request to the specified `response_id` values. Use a comma-separated list to specify more than one `response_id` value.",
					"type": "string"
				}, {
					"name": "completed",
					"in": "query",
					"description": "true if form was submitted. Otherwise, false.",
					"type": "boolean"
				}, {
					"name": "sort",
					"in": "query",
					"description": "Order of responses. Currently, responses are automatically sorted by `submitted_at,desc`---the date they were submitted, from newest to oldest. We plan to add more options for sort order soon.",
					"type": "string"
				}, {
					"name": "query",
					"in": "query",
					"description": "Limit request to only responses that that include the specified string. You can specify any string as the `query` value. The string will be escaped, and the query will include Hidden Fields.",
					"type": "string"
				}, {
					"name": "fields",
					"in": "query",
					"description": "Limit request to only responses for the specified fields (as a comma-separated list of field `id` values).",
					"type": "array",
					"items": {
						"type": "string"
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}],
				"consumes": ["text/plain"]
			},
			"delete": {
				"tags": ["Responses"],
				"summary": "Delete responses",
				"description": "Delete responses to a form. You must specify the `included_tokens` parameter.",
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "included_tokens",
					"in": "query",
					"description": "Comma-separated list of tokens of the responses to delete. You can list up to **1000** tokens.",
					"type": "string",
					"required": true
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/forms/{form_id}/responses/{response_id}/fields/{field_id}/files/{filename}": {
			"get": {
				"tags": ["Responses"],
				"summary": "Retrieve response file",
				"description": "Retrieves a file uploaded as an answer for a submission",
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "response_id",
					"description": "Unique ID for the response.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "field_id",
					"description": "Unique ID for the file upload field",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "filename",
					"description": "filename for the uploaded file",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/me": {
			"get": {
				"security": [{
					"bearer_auth": []
				}],
				"tags": ["Accounts"],
				"summary": "Retrieve your own account",
				"description": "Retrieve your own account information.",
				"produces": ["application/json"],
				"parameters": [{
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/forms": {
			"post": {
				"tags": ["Forms"],
				"summary": "Create form",
				"description": "Here's the general structure for requests to create a form:\n  - `title`: Title to use for the form.\n  - `settings`: Object that specifies form settings and metadata, including the language to use for the form, whether the form is publicly available, the basis for the progress bar, and search engine indexing settings.\n  - `theme`: Theme to use for the form.\n  - `workspace`: Workspace that contains the form.\n  - `hidden`: Array of Hidden Fields to use in the form.\n  - `variables`: Object that keeps track of total score or price, if you use them in the form.\n  - `welcome_screens`: Array of objects that specify settings and properties for the form's welcome screen.\n  - `thankyou_screens`: Array of objects that specify settings and properties for the form's thank you screen.\n  - `fields`: Array of objects that specify the fields to use in the form and their properties, validations, and attachments.\n  - `logic`: Array of Logic Jump objects to use in the form.\n\nExpand the schema below for details about each of these elements. For optional elements, if you don't send a value and the element doesn't have a default value, no attribute will be returned.\n\nAny images you want to use in your form must already exist in your Typeform account. If you try to create a form that includes an image that isn't already in your Typeform account, the response will include an \"IMAGE_NOT_FOUND\" error. Use the [POST https://api.typeform.com/images](/create/reference/create-image) endpoint to add images to your account.\n\n**NOTE:** It is not possible to inject third-party content into a typeform using the Create API.",
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "A complete form resource.",
					"required": true,
					"schema": {
						"type": "object",
						"description": "Request the user submits to create or update a form.",
						"properties": {
							"title": {
								"type": "string",
								"description": "Title to use for the typeform."
							},
							"settings": {
								"type": "object",
								"properties": {
									"language": {
										"type": "string",
										"enum": ["en", "es", "ca", "fr", "de", "ru", "it", "da", "pt", "ch", "zh", "nl", "no", "uk", "ja", "ko", "hr", "fi", "sv", "pl", "el", "hu", "tr", "cs", "et", "di"]
									},
									"is_public": {
										"type": "boolean",
										"default": true,
										"description": "true if your form is public. Otherwise, false (your form is private)."
									},
									"progress_bar": {
										"type": "string",
										"enum": ["percentage", "proportion"],
										"default": "proportion",
										"description": "Basis for the progress bar displayed on the screen. Choose \"proportion\" to show the number of questions answered so far. Choose \"percentage\" to show the percentage of questions answered so far."
									},
									"show_progress_bar": {
										"type": "boolean",
										"default": true,
										"description": "true to display progress bar on the typeform. Otherwise, false."
									},
									"show_typeform_branding": {
										"type": "boolean",
										"default": true,
										"description": "true to display Typeform brand on the typeform. false to hide Typeform branding on the typeform. Hiding Typeform branding is available for [Premium accounts](https://help.typeform.com/hc/en-us/articles/360030829332)."
									},
									"meta": {
										"type": "object",
										"properties": {
											"allow_indexing": {
												"type": "boolean",
												"default": true,
												"description": "true to allow search engines to index your typeform. Otherwise, false."
											},
											"description": {
												"type": "string",
												"description": "Description for search engines to display for your typeform."
											},
											"image": {
												"type": "object",
												"properties": {
													"href": {
														"type": "string",
														"format": "uri",
														"description": "URL of image for search engines to display for your typeform."
													}
												}
											}
										}
									},
									"redirect_after_submit_url": {
										"type": "string",
										"description": "URL where the typeform should redirect upon submission."
									},
									"google_analytics": {
										"type": "string",
										"description": "Google Analytics tracking ID to use for the form."
									},
									"facebook_pixel": {
										"type": "string",
										"description": "Facebook Pixel tracking ID to use for the form."
									},
									"google_tag_manager": {
										"type": "string",
										"description": "Google Tag Manager ID to use for the form."
									},
									"notifications": {
										"type": "object",
										"properties": {
											"self": {
												"type": "object",
												"description": "Settings for notifications sent when respondents complete and submit the typeform.",
												"properties": {
													"enabled": {
														"type": "boolean",
														"default": true,
														"description": "true to send notifications. false to disable notifications."
													},
													"recipients": {
														"type": "array",
														"items": {
															"type": "string",
															"format": "email",
															"description": "Email addresses where notifications should be sent."
														}
													},
													"reply_to": {
														"type": "string",
														"description": "Email address to use for notification Reply-To. Must be a Recall Information value based on respondent's answer to a field: {{field:ref}} or {{hidden:ref}}."
													},
													"subject": {
														"type": "string",
														"example": "You received a response to your typeform {{form:title}}!",
														"description": "Subject to use for the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:email}}, {{account:name}}, {{link:report}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}."
													},
													"message": {
														"type": "string",
														"description": "Message to include in the body of the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:email}}, {{account:name}}, {{link:report}}, {{form:all_answers}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}.\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
													}
												},
												"required": ["recipients", "subject", "message"]
											},
											"respondent": {
												"type": "object",
												"description": "Settings for notifications sent to respondents immediately after submitting the typeform.",
												"properties": {
													"enabled": {
														"type": "boolean",
														"default": true,
														"description": "true to send respondent notifications. false to disable respondent notifications."
													},
													"recipient": {
														"type": "string",
														"description": "Email where respondent notification will be sent. Must be a Recall Information value based on respondent's answer to a field: {{field:ref}} or {{hidden:ref}}."
													},
													"reply_to": {
														"type": "array",
														"items": {
															"type": "string",
															"format": "email",
															"description": "Email address to use for respondent notification Reply-To."
														}
													},
													"subject": {
														"type": "string",
														"example": "Thank you for completing the typeform {{form:title}}!",
														"description": "Subject to use for the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:fullname}}, {{account:email}}, {{account:name}}, {{link:report}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}."
													},
													"message": {
														"type": "string",
														"description": "Message to include in the body of the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:fullname}}, {{account:email}}, {{account:name}}, {{link:report}}, {{form:all_answers}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}.\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
													}
												},
												"required": ["recipient", "subject", "message"]
											}
										}
									}
								}
							},
							"theme": {
								"type": "string",
								"example": "https://api.typeform.com/themes/Fs24as",
								"description": "URL of the theme to use for the typeform. If you don't specify a URL for the theme, Typeform applies a new copy of the default theme to the form."
							},
							"workspace": {
								"type": "object",
								"properties": {
									"href": {
										"type": "string",
										"example": "https://api.typeform.com/workspaces/Aw33bz"
									}
								},
								"description": "URL of the workspace to use for the typeform. If you don't specify a URL for the workspace, Typeform saves the form in the default workspace."
							},
							"hidden": {
								"type": "array",
								"default": [],
								"description": "Array of Hidden Fields to use in the form.",
								"items": {
									"type": "string"
								}
							},
							"variables": {
								"type": "object",
								"properties": {
									"score": {
										"type": "integer",
										"description": "Recall Information for keeping score as users answer each question (for example, for quizzes).",
										"enum": [0]
									},
									"price": {
										"type": "number",
										"description": "Recall Information for tracking the total price of all items users select (for example, for shopping carts, donation campaigns, and payment collections)."
									}
								}
							},
							"welcome_screens": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the welcome screen.",
											"example": "nice-readable-welcome-ref"
										},
										"title": {
											"type": "string",
											"description": "Title for the welcome screen.",
											"example": "Welcome Title"
										},
										"properties": {
											"type": "object",
											"properties": {
												"description": {
													"type": "string",
													"description": "Description of the welcome screen.",
													"example": "Cool description for the welcome"
												},
												"show_button": {
													"type": "boolean",
													"description": "true to display a 'Start' button on the welcome screen. Otherwise, false.",
													"example": true
												},
												"button_text": {
													"type": "string",
													"description": "Text to display on the 'Start' button on the welcome screen.",
													"example": "start"
												}
											}
										},
										"attachment": {
											"example": null,
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										}
									},
									"required": ["title"]
								}
							},
							"thankyou_screens": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the thank you screen.",
											"example": "nice-readable-thank-you-ref"
										},
										"title": {
											"type": "string",
											"description": "Title for the thank you screen.",
											"example": "Thank you Title"
										},
										"properties": {
											"type": "object",
											"properties": {
												"show_button": {
													"type": "boolean",
													"description": "true to display a 'Submit' button on the thank you screen. Otherwise, false.",
													"example": true
												},
												"button_text": {
													"type": "string",
													"description": "Text to display on the 'Submit' button on the thank you screen.",
													"example": "start"
												},
												"button_mode": {
													"type": "string",
													"description": "Specify whether the form should reload or redirect to another URL when respondents click the 'Submit' button. [Premium feature](https://www.typeform.com/pricing/).",
													"enum": ["reload", "redirect"],
													"example": "redirect"
												},
												"redirect_url": {
													"type": "string",
													"description": "URL where the typeform should redirect after submission, if you specified \"redirect\" for `button_mode`.",
													"example": "https://www.typeform.com"
												},
												"share_icons": {
													"type": "boolean",
													"description": "true to display social media sharing icons on the thank you screen so respondents can post your typeform's link on Facebook, Twitter, LinkedIn, and Google+. Otherwise, false.",
													"example": false
												}
											}
										},
										"attachment": {
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										}
									},
									"required": ["title"]
								}
							},
							"fields": {
								"type": "array",
								"items": {
									"type": "object",
									"externalDocs": {
										"description": "Documentation about different field types and their characteristics.",
										"url": "https://link.to.the.documentation/asdfasdf"
									},
									"required": ["type", "title"],
									"description": "Reference for properties in a field. The required fields and properties depend on the `type` value.",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the field."
										},
										"title": {
											"type": "string",
											"description": "Unique name you assign to the field on this form."
										},
										"type": {
											"type": "string",
											"description": "The type of field.",
											"enum": ["date", "dropdown", "email", "file_upload", "group", "legal", "long_text", "multiple_choice", "number", "opinion_scale", "payment", "picture_choice", "rating", "short_text", "statement", "website", "yes_no", "phone_number"]
										},
										"properties": {
											"type": "object",
											"properties": {
												"description": {
													"type": "string",
													"description": "Question or instruction to display for the field."
												},
												"choices": {
													"type": "array",
													"description": "Answer choices. Available for `dropdown`, `multiple_choice`, and `picture_choice` types.",
													"items": {
														"type": "object",
														"properties": {
															"ref": {
																"type": "string",
																"description": "Readable name you can use to reference the answer choice. Available for `multiple_choice` and `picture_choice` types. Not available for `dropdown` types."
															},
															"label": {
																"type": "string",
																"description": "Text for the answer choice."
															},
															"attachment": {
																"type": "object",
																"description": "Identifies the image to use for the answer choice. Available only for `picture_choice` types.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Type of attachment.",
																		"enum": ["image"]
																	},
																	"href": {
																		"type": "string",
																		"description": "URL for the image to use for the answer choice. Images must already exist in your account---use the image's Typeform URL."
																	}
																}
															}
														}
													}
												},
												"fields": {
													"type": "array",
													"description": "Contains the fields that belong in a question group. Only `payment` and `group` blocks are not allowed inside a question group. Available for the `group` type."
												},
												"allow_multiple_selection": {
													"type": "boolean",
													"default": false,
													"description": "true to allow respondents to select more than one answer choice. false to allow respondents to select only one answer choice. Available for `multiple_choice` and `picture_choice` types."
												},
												"randomize": {
													"type": "boolean",
													"default": false,
													"description": "true if answer choices should be presented in a new random order for each respondent. false if answer choices should be presented in the same order for each respondent. Available for `multiple_choice`, `picture_choice` and `dropdown` types."
												},
												"allow_other_choice": {
													"type": "boolean",
													"default": false,
													"description": "true to include an \"Other\" option so respondents can enter a different answer choice from those listed. false to limit answer choices to those listed. Available for `multiple_choice` and `picture_choice` types."
												},
												"vertical_alignment": {
													"type": "boolean",
													"default": false,
													"description": "true to list answer choices vertically. false to list answer choices horizontally. Available for `multiple_choice` types."
												},
												"supersized": {
													"type": "boolean",
													"default": false,
													"description": "true if you want to use larger-sized images for answer choices. Otherwise, false. Available for `picture_choice` types."
												},
												"show_labels": {
													"type": "boolean",
													"default": true,
													"description": "true to show text labels and images as answer choices. false to show only images as answer choices. Available for `picture_choice` types."
												},
												"alphabetical_order": {
													"type": "boolean",
													"default": false,
													"description": "true if question should list dropdown answer choices in alphabetical order. false if question should list dropdown answer choices in the order they're listed in the \"choices\" array. Available for `dropdown` types."
												},
												"hide_marks": {
													"type": "boolean",
													"default": false,
													"description": "true if you want to display quotation marks around the statement on the form. Otherwise, false. Available for `statement` types."
												},
												"button_text": {
													"type": "string",
													"default": "Continue",
													"description": "Text to display in the button associated with the object. Available for `group`, `payment`, and `statement` types."
												},
												"steps": {
													"type": "number",
													"description": "Number of steps in the scale's range. Minimum is 5 and maximum is 11. Available for `opinion_scale` and `rating` types."
												},
												"shape": {
													"type": "string",
													"default": "star",
													"description": "Shape to display on the scale's steps. Available for `opinion_scale` and `rating` types.",
													"enum": ["cat", "circle", "cloud", "crown", "dog", "droplet", "flag", "heart", "lightbulb", "pencil", "skull", "star", "thunderbolt", "tick", "trophy", "up", "user"]
												},
												"labels": {
													"type": "object",
													"description": "Label to help respondents understand the scale's range. Available for `opinion_scale` and `rating` types.",
													"properties": {
														"left": {
															"type": "string",
															"description": "Text of the left-aligned label for the scale."
														},
														"right": {
															"type": "string",
															"description": "Text of the right-aligned label for the scale."
														},
														"center": {
															"type": "string",
															"description": "Text of the center-aligned label for the scale."
														}
													}
												},
												"start_at_one": {
													"type": "boolean",
													"default": false,
													"description": "true if range numbering should start at 1. false if range numbering should start at 0. Available for `opinion_scale` types."
												},
												"structure": {
													"type": "string",
													"default": "DDMMYYYY",
													"description": "Format for month, date, and year in answer. Available for `date` types.",
													"enum": ["MMDDYYYY", "DDMMYYYY", "YYYYMMDD"]
												},
												"separator": {
													"type": "string",
													"default": "/",
													"description": "Character to use between month, day, and year in answer. Available for `date` types.",
													"enum": ["/", "-", "."]
												},
												"currency": {
													"type": "string",
													"default": "EUR",
													"description": "Currency of the payment. Available for `payment` types.",
													"enum": ["AUD", "BRL", "CAD", "CHF", "DKK", "EUR", "GBP", "MXN", "NOK", "SEK", "USD"]
												},
												"price": {
													"type": "object",
													"description": "Price of the item. Available for `payment` fields.",
													"properties": {
														"type": {
															"type": "string",
															"enum": ["variable"]
														},
														"value": {
															"type": "string",
															"enum": ["price"]
														}
													}
												},
												"show_button": {
													"type": "boolean",
													"default": false,
													"description": "true to display a button. Otherwise, false. Available for `group` and `payment` types."
												}
											}
										},
										"validations": {
											"type": "object",
											"properties": {
												"required": {
													"type": "boolean",
													"default": false,
													"description": "true if respondents must provide an answer. Otherwise, false. Available for `date`, `dropdown`, `email`, `file_upload`, `legal`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `picture_choice`, `rating`, `short_text`, `website`, `phone_number`, and `yes_no` types."
												},
												"max_length": {
													"type": "integer",
													"default": 0,
													"description": "Maximum number of characters allowed in the answer. Available for `long_text` and `short_text` types."
												},
												"min_value": {
													"type": "integer",
													"default": 0,
													"description": "Minimum value allowed in the answer, must be a positive integer. Available for `number` types."
												},
												"max_value": {
													"type": "integer",
													"default": 0,
													"description": "Maximum value allowed in the answer, must be a positive integer. Available for `number` types."
												},
												"min_selection": {
													"type": "integer",
													"default": 0,
													"description": "Minimum selections allowed in the answer, must be a positive integer. Available for `multiple_choice` and `picture_choice` types."
												},
												"max_selection": {
													"type": "integer",
													"default": 0,
													"description": "Maximum selections allowed in the answer, must be a positive integer. Available for `multiple_choice` and `picture_choice` types."
												}
											}
										},
										"attachment": {
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										}
									}
								}
							},
							"logic": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"description": "Specifies whether the Logic Jump is based on a question field or Hidden Field.",
											"enum": ["field", "hidden"]
										},
										"ref": {
											"type": "string",
											"description": "Reference to the field that triggers the the Logic Jump."
										},
										"actions": {
											"type": "array",
											"description": "Array of objects that define the Logic Jump's behavior.",
											"items": {
												"type": "object",
												"properties": {
													"action": {
														"type": "string",
														"description": "Behavior the Logic Jump will take.",
														"enum": ["jump", "add", "subtract", "multiply", "divide"]
													},
													"details": {
														"type": "object",
														"description": "Properties that further specify how the Logic Jump will behave.",
														"properties": {
															"to": {
																"type": "object",
																"description": "Specifies where the Logic Jump leads---to another field (\"field\"), a Hidden Field (\"hidden\"), or thank you screen (\"thankyou\").",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Logic Jump \"to\" option you are using.",
																		"enum": ["field", "hidden", "thankyou"]
																	},
																	"value": {
																		"type": "string",
																		"description": "The \"ref\" value for the field, Hidden Field, or thank you screen the Logic Jump leads to."
																	}
																},
																"required": ["type", "value"]
															},
															"target": {
																"type": "object",
																"description": "Keeps a running total for the `score` or `price` variable.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Specifies that the value is a variable.",
																		"enum": ["variable"]
																	},
																	"value": {
																		"type": "string",
																		"description": "Variable value to use in calculation.",
																		"enum": ["score", "price"]
																	}
																},
																"required": ["type", "value"]
															},
															"value": {
																"type": "object",
																"description": "Specifies the numeric value to use in the calculation for the `score` or `price` variable.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Specifies that the numeric value is a constant.",
																		"enum": ["constant"]
																	},
																	"value": {
																		"type": "number",
																		"description": "Numeric value to use in calculation."
																	}
																},
																"required": ["type", "value"]
															}
														}
													},
													"condition": {
														"type": "object",
														"description": "Conditions for executing the Logic Jump. Conditions answer the question, \"Under what circumstances?\" The condition object is the IF statement in your Logic Jump.",
														"properties": {
															"op": {
																"type": "string",
																"description": "Operator for the condition.",
																"enum": ["begins_with", "ends_with", "contains", "not_contains", "lower_than", "lower_equal_than", "greater_than", "greater_equal_than", "is", "is_not", "equal", "not_equal", "always", "on", "not_on", "earlier_than", "earlier_than_or_on", "later_than", "later_than_or_on"]
															},
															"vars": {
																"type": "array",
																"description": "Object that defines the field type and value to evaluate with the operator.",
																"items": {
																	"type": "object",
																	"properties": {
																		"type": {
																			"type": "string",
																			"description": "Type of value the condition object refers to.",
																			"enum": ["field", "hidden", "variable", "constant", "end"]
																		},
																		"value": {
																			"type": "object",
																			"description": "Value to check for in the \"type\" field to evaluate with the operator."
																		}
																	},
																	"required": ["type", "value"]
																}
															}
														},
														"required": ["op", "vars"]
													}
												},
												"required": ["action", "details", "condition"]
											}
										}
									},
									"required": ["type", "actions"]
								}
							}
						},
						"required": ["title", "workspace"],
						"example": {
							"title": "This is an example form",
							"settings": {
								"language": "en",
								"is_public": false,
								"progress_bar": "percentage",
								"show_progress_bar": true,
								"show_typeform_branding": false,
								"meta": {
									"allow_indexing": true,
									"description": "Cool meta description",
									"image": {
										"href": "https://images.typeform.com/images/4bcd3"
									}
								},
								"redirect_after_submit_url": "https://www.redirecttohere.com",
								"google_analytics": "UA-1111-22",
								"facebook_pixel": "4347295725729872",
								"google_tag_manager": "gtm-43959999",
								"notifications": {
									"self": {
										"enabled": true,
										"recipients": ["email@example.org"],
										"reply_to": "{{field:email_field_reference}}",
										"subject": "Typeform: new response for {{form:title}}",
										"message": "Your typeform {{form:title}} has a new response\n\n{{form:all_answers}}"
									},
									"respondent": {
										"enabled": false,
										"recipient": "{{field:email_field_reference}}",
										"reply_to": ["info@example.org"],
										"subject": "Typeform: Thank you for completing {{form:title}}!",
										"message": "Hi {{field:name_field_reference}}!\n\nWe recieved your submission. Thank you, and have a nice day!\n\nSincerely,\nThe Team at My Company"
									}
								}
							},
							"theme": {
								"href": "https://api.typeform.com/themes/jL34ds"
							},
							"workspace": {
								"href": "https://api.typeform.com/workspaces/Aw33bz"
							},
							"hidden": ["var1", "var2", "var3"],
							"variables": {
								"score": 0,
								"price": 10.59
							},
							"welcome_screens": [{
								"ref": "nice-readable-welcome-ref",
								"title": "Welcome Title",
								"properties": {
									"description": "Cool description for the welcome",
									"show_button": true,
									"button_text": "start"
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"thankyou_screens": [{
								"ref": "nice-readable-thank-you-ref",
								"title": "Thank you Title",
								"properties": {
									"show_button": true,
									"button_text": "start",
									"button_mode": "redirect",
									"redirect_url": "https://www.typeform.com",
									"share_icons": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"fields": [{
								"ref": "nice_readable_date_reference",
								"title": "Date Title",
								"type": "date",
								"properties": {
									"description": "Cool description for the date",
									"structure": "DDMMYYYY",
									"separator": "-"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_dropdown_reference",
								"title": "Dropdown Title",
								"type": "dropdown",
								"properties": {
									"description": "Cool description for the dropdown",
									"alphabetical_order": false,
									"randomize": false,
									"choices": [{
										"label": "Foo"
									}, {
										"label": "Bar"
									}]
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_email_reference",
								"title": "Email Title",
								"type": "email",
								"properties": {
									"description": "Cool description for the email"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_file_upload_reference",
								"title": "File Upload Title",
								"type": "file_upload",
								"properties": {
									"description": "Cool description for the file upload"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_legal_reference",
								"title": "Legal Title",
								"type": "legal",
								"properties": {
									"description": "Cool description for the legal"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_long_text_reference",
								"title": "Long Text Title",
								"type": "long_text",
								"properties": {
									"description": "Cool description for the long text"
								},
								"validations": {
									"required": false,
									"max_length": 20
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_multiple_choice_reference",
								"title": "Multiple Choice Title",
								"type": "multiple_choice",
								"properties": {
									"description": "Cool description for the multiple choice",
									"randomize": true,
									"allow_multiple_selection": false,
									"allow_other_choice": true,
									"vertical_alignment": false,
									"choices": [{
										"label": "Foo",
										"ref": "foo_choice_ref"
									}, {
										"label": "Bar",
										"ref": "bar_choice_ref"
									}]
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_number_reference",
								"title": "Number Title",
								"type": "number",
								"properties": {
									"description": "Cool description for the number"
								},
								"validations": {
									"required": false,
									"min_value": 20,
									"max_value": 50
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_opinion_scale_reference",
								"title": "Opinion Scale Title",
								"type": "opinion_scale",
								"properties": {
									"description": "Cool description for the opinion scale field",
									"steps": 9,
									"start_at_one": true,
									"labels": {
										"left": "left label",
										"center": "center label",
										"right": "right label"
									}
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_picture_choice_reference",
								"title": "Picture Choice Title",
								"type": "picture_choice",
								"properties": {
									"description": "Cool description for the picture choice",
									"randomize": true,
									"allow_multiple_selection": false,
									"allow_other_choice": true,
									"supersized": false,
									"show_labels": false,
									"choices": [{
										"ref": "foo_choice_ref1",
										"label": "Foo 1",
										"attachment": {
											"type": "image",
											"href": "https://images.typeform.com/images/4bcd3"
										}
									}, {
										"ref": "foo_choice_ref2",
										"label": "Foo 2",
										"attachment": {
											"type": "image",
											"href": "https://images.typeform.com/images/4bcd3"
										}
									}]
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_rating_reference",
								"title": "Rating Title",
								"type": "rating",
								"properties": {
									"description": "Cool description for the rating",
									"steps": 10,
									"shape": "star"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_short_text_reference",
								"title": "Short Text Title",
								"type": "short_text",
								"properties": {
									"description": "Cool description for the short text"
								},
								"validations": {
									"required": false,
									"max_length": 20
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_statement_reference",
								"title": "Statement Title",
								"type": "statement",
								"properties": {
									"description": "Cool description for the statement",
									"button_text": "Statement button text",
									"hide_marks": true
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_website_reference",
								"title": "Website Title",
								"type": "website",
								"properties": {
									"description": "Cool description for the website"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_yes_no_reference",
								"title": "yes or no",
								"type": "yes_no",
								"properties": {
									"description": "Cool description for the Yes/No question"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_payment_reference",
								"title": "payment",
								"type": "payment",
								"properties": {
									"description": "Cool description for the payment group",
									"currency": "EUR",
									"price": {
										"type": "variable",
										"value": "price"
									},
									"show_button": true,
									"button_text": "next"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "a_group_field_ref",
								"title": "group field",
								"type": "group",
								"properties": {
									"description": "Question group description",
									"show_button": true,
									"button_text": "Some text",
									"fields": [{
										"ref": "nice_readable_website_reference",
										"title": "website",
										"type": "website",
										"properties": {
											"description": "Cool description for the website"
										}
									}]
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"logic": [{
								"type": "field",
								"ref": "nice_readable_yes_no_reference",
								"actions": [{
									"action": "jump",
									"details": {
										"to": {
											"type": "field",
											"value": "nice_readable_rating_reference"
										}
									},
									"condition": {
										"op": "equal",
										"vars": [{
											"type": "field",
											"value": "nice_readable_number_reference"
										}, {
											"type": "constant",
											"value": 5
										}]
									}
								}, {
									"action": "add",
									"details": {
										"target": {
											"type": "variable",
											"value": "score"
										},
										"value": {
											"type": "constant",
											"value": 5
										}
									},
									"condition": {
										"op": "is",
										"vars": [{
											"type": "field",
											"value": "nice_readable_yes_no_reference"
										}, {
											"type": "constant",
											"value": true
										}]
									}
								}]
							}]
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"get": {
				"tags": ["Forms"],
				"summary": "Retrieve forms",
				"description": "Retrieves a list of JSON descriptions for all forms in your Typeform account (public and private). Forms are sorted by creation date in descending order.",
				"parameters": [{
					"name": "search",
					"in": "query",
					"type": "string",
					"required": false,
					"description": "Returns items that contain the specified string."
				}, {
					"name": "page",
					"in": "query",
					"type": "integer",
					"default": 1,
					"description": "The page of results to retrieve. Default `1` is the first page of results."
				}, {
					"name": "page_size",
					"in": "query",
					"type": "number",
					"default": 10,
					"maximum": 200,
					"description": "Number of results to retrieve per page. Default is 10. Maximum is 200."
				}, {
					"name": "workspace_id",
					"in": "query",
					"description": "Retrieve typeforms for the specified workspace.",
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/forms/{form_id}": {
			"patch": {
				"tags": ["Forms"],
				"summary": "Update form (patch)",
				"description": "Updates an existing form.",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "body",
					"in": "body",
					"schema": {
						"description": "Request the user submits to partially update a form.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"op": {
									"type": "string"
								},
								"path": {
									"type": "string",
									"enum": ["/settings/facebook_pixel", "/settings/google_analytics", "/settings/google_tag_manager", "/settings/is_public", "/theme", "/title", "/workspace"]
								},
								"value": {
									"type": "string"
								}
							},
							"required": ["op", "path", "value"]
						},
						"example": [{
							"op": "replace",
							"path": "/title",
							"value": "foo"
						}, {
							"op": "replace",
							"path": "/settings/is_public",
							"value": false
						}, {
							"op": "replace",
							"path": "/workspace",
							"value": {
								"href": "https://api.typeform.com/workspaces/123"
							}
						}, {
							"op": "replace",
							"path": "/theme",
							"value": {
								"href": "https://api.typeform.com/themes/123"
							}
						}]
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}],
				"produces": [""]
			},
			"put": {
				"tags": ["Forms"],
				"summary": "Update form",
				"description": "Updates an existing form.\n\nYour request body must include all the existing form fields, in addition to the new email field.\n\nOverwrites the previously stored form with the given `form_id`. Any new fields in your request will be added to the form. Likewise, any fields you don't include in your request will be deleted from the form. **Make sure your `PUT` request contains every field you want to include in your updated form, including the field `id`.**\n\n**NOTE:**  Tread carefully when updating fields in forms. `PUT` overwrites the entire form, so if you don't include each field (with the original field `id`) in your `PUT` request, the missing fields **and results for those fields** will be deleted.\n\nDetails about the fields and elements for this endpoint are available in the **Create Form** description.\n\nThe `theme` property applies a theme to the form. If you don't specify a value for the 'theme' property, Typeform applies a **new** copy of the default theme to the form, **even if you already have a copy of the default theme applied to this form.**",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"required": true,
					"description": "A complete form resource.",
					"schema": {
						"type": "object",
						"properties": {
							"fields": {
								"type": "array",
								"items": {
									"required": ["type", "title", "id"],
									"type": "object",
									"externalDocs": {
										"description": "Documentation about different field types and their characteristics.",
										"url": "https://link.to.the.documentation/asdfasdf"
									},
									"description": "Reference for properties in a field. The required fields and properties depend on the `type` value.",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the field."
										},
										"title": {
											"type": "string",
											"description": "Unique name you assign to the field on this form."
										},
										"type": {
											"type": "string",
											"description": "The type of field.",
											"enum": ["date", "dropdown", "email", "file_upload", "group", "legal", "long_text", "multiple_choice", "number", "opinion_scale", "payment", "picture_choice", "rating", "short_text", "statement", "website", "yes_no", "phone_number"]
										},
										"properties": {
											"type": "object",
											"properties": {
												"description": {
													"type": "string",
													"description": "Question or instruction to display for the field."
												},
												"choices": {
													"type": "array",
													"description": "Answer choices. Available for `dropdown`, `multiple_choice`, and `picture_choice` types.",
													"items": {
														"type": "object",
														"properties": {
															"ref": {
																"type": "string",
																"description": "Readable name you can use to reference the answer choice. Available for `multiple_choice` and `picture_choice` types. Not available for `dropdown` types."
															},
															"label": {
																"type": "string",
																"description": "Text for the answer choice."
															},
															"attachment": {
																"type": "object",
																"description": "Identifies the image to use for the answer choice. Available only for `picture_choice` types.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Type of attachment.",
																		"enum": ["image"]
																	},
																	"href": {
																		"type": "string",
																		"description": "URL for the image to use for the answer choice. Images must already exist in your account---use the image's Typeform URL."
																	}
																}
															}
														}
													}
												},
												"fields": {
													"type": "array",
													"description": "Contains the fields that belong in a question group. Only `payment` and `group` blocks are not allowed inside a question group. Available for the `group` type."
												},
												"allow_multiple_selection": {
													"type": "boolean",
													"default": false,
													"description": "true to allow respondents to select more than one answer choice. false to allow respondents to select only one answer choice. Available for `multiple_choice` and `picture_choice` types."
												},
												"randomize": {
													"type": "boolean",
													"default": false,
													"description": "true if answer choices should be presented in a new random order for each respondent. false if answer choices should be presented in the same order for each respondent. Available for `multiple_choice`, `picture_choice` and `dropdown` types."
												},
												"allow_other_choice": {
													"type": "boolean",
													"default": false,
													"description": "true to include an \"Other\" option so respondents can enter a different answer choice from those listed. false to limit answer choices to those listed. Available for `multiple_choice` and `picture_choice` types."
												},
												"vertical_alignment": {
													"type": "boolean",
													"default": false,
													"description": "true to list answer choices vertically. false to list answer choices horizontally. Available for `multiple_choice` types."
												},
												"supersized": {
													"type": "boolean",
													"default": false,
													"description": "true if you want to use larger-sized images for answer choices. Otherwise, false. Available for `picture_choice` types."
												},
												"show_labels": {
													"type": "boolean",
													"default": true,
													"description": "true to show text labels and images as answer choices. false to show only images as answer choices. Available for `picture_choice` types."
												},
												"alphabetical_order": {
													"type": "boolean",
													"default": false,
													"description": "true if question should list dropdown answer choices in alphabetical order. false if question should list dropdown answer choices in the order they're listed in the \"choices\" array. Available for `dropdown` types."
												},
												"hide_marks": {
													"type": "boolean",
													"default": false,
													"description": "true if you want to display quotation marks around the statement on the form. Otherwise, false. Available for `statement` types."
												},
												"button_text": {
													"type": "string",
													"default": "Continue",
													"description": "Text to display in the button associated with the object. Available for `group`, `payment`, and `statement` types."
												},
												"steps": {
													"type": "number",
													"description": "Number of steps in the scale's range. Minimum is 5 and maximum is 11. Available for `opinion_scale` and `rating` types."
												},
												"shape": {
													"type": "string",
													"default": "star",
													"description": "Shape to display on the scale's steps. Available for `opinion_scale` and `rating` types.",
													"enum": ["cat", "circle", "cloud", "crown", "dog", "droplet", "flag", "heart", "lightbulb", "pencil", "skull", "star", "thunderbolt", "tick", "trophy", "up", "user"]
												},
												"labels": {
													"type": "object",
													"description": "Label to help respondents understand the scale's range. Available for `opinion_scale` and `rating` types.",
													"properties": {
														"left": {
															"type": "string",
															"description": "Text of the left-aligned label for the scale."
														},
														"right": {
															"type": "string",
															"description": "Text of the right-aligned label for the scale."
														},
														"center": {
															"type": "string",
															"description": "Text of the center-aligned label for the scale."
														}
													}
												},
												"start_at_one": {
													"type": "boolean",
													"default": false,
													"description": "true if range numbering should start at 1. false if range numbering should start at 0. Available for `opinion_scale` types."
												},
												"structure": {
													"type": "string",
													"default": "DDMMYYYY",
													"description": "Format for month, date, and year in answer. Available for `date` types.",
													"enum": ["MMDDYYYY", "DDMMYYYY", "YYYYMMDD"]
												},
												"separator": {
													"type": "string",
													"default": "/",
													"description": "Character to use between month, day, and year in answer. Available for `date` types.",
													"enum": ["/", "-", "."]
												},
												"currency": {
													"type": "string",
													"default": "EUR",
													"description": "Currency of the payment. Available for `payment` types.",
													"enum": ["AUD", "BRL", "CAD", "CHF", "DKK", "EUR", "GBP", "MXN", "NOK", "SEK", "USD"]
												},
												"price": {
													"type": "object",
													"description": "Price of the item. Available for `payment` fields.",
													"properties": {
														"type": {
															"type": "string",
															"enum": ["variable"]
														},
														"value": {
															"type": "string",
															"enum": ["price"]
														}
													}
												},
												"show_button": {
													"type": "boolean",
													"default": false,
													"description": "true to display a button. Otherwise, false. Available for `group` and `payment` types."
												}
											}
										},
										"validations": {
											"type": "object",
											"properties": {
												"required": {
													"type": "boolean",
													"default": false,
													"description": "true if respondents must provide an answer. Otherwise, false. Available for `date`, `dropdown`, `email`, `file_upload`, `legal`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `picture_choice`, `rating`, `short_text`, `website`, `phone_number`, and `yes_no` types."
												},
												"max_length": {
													"type": "integer",
													"default": 0,
													"description": "Maximum number of characters allowed in the answer. Available for `long_text` and `short_text` types."
												},
												"min_value": {
													"type": "integer",
													"default": 0,
													"description": "Minimum value allowed in the answer, must be a positive integer. Available for `number` types."
												},
												"max_value": {
													"type": "integer",
													"default": 0,
													"description": "Maximum value allowed in the answer, must be a positive integer. Available for `number` types."
												},
												"min_selection": {
													"type": "integer",
													"default": 0,
													"description": "Minimum selections allowed in the answer, must be a positive integer. Available for `multiple_choice` and `picture_choice` types."
												},
												"max_selection": {
													"type": "integer",
													"default": 0,
													"description": "Maximum selections allowed in the answer, must be a positive integer. Available for `multiple_choice` and `picture_choice` types."
												}
											}
										},
										"attachment": {
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										},
										"id": {
											"type": "string",
											"description": "The unique ID for the question.",
											"example": "yt6gk3s1"
										}
									}
								}
							},
							"title": {
								"type": "string",
								"description": "Title to use for the typeform."
							},
							"settings": {
								"type": "object",
								"properties": {
									"language": {
										"type": "string",
										"enum": ["en", "es", "ca", "fr", "de", "ru", "it", "da", "pt", "ch", "zh", "nl", "no", "uk", "ja", "ko", "hr", "fi", "sv", "pl", "el", "hu", "tr", "cs", "et", "di"]
									},
									"is_public": {
										"type": "boolean",
										"default": true,
										"description": "true if your form is public. Otherwise, false (your form is private)."
									},
									"progress_bar": {
										"type": "string",
										"enum": ["percentage", "proportion"],
										"default": "proportion",
										"description": "Basis for the progress bar displayed on the screen. Choose \"proportion\" to show the number of questions answered so far. Choose \"percentage\" to show the percentage of questions answered so far."
									},
									"show_progress_bar": {
										"type": "boolean",
										"default": true,
										"description": "true to display progress bar on the typeform. Otherwise, false."
									},
									"show_typeform_branding": {
										"type": "boolean",
										"default": true,
										"description": "true to display Typeform brand on the typeform. false to hide Typeform branding on the typeform. Hiding Typeform branding is available for [Premium accounts](https://help.typeform.com/hc/en-us/articles/360030829332)."
									},
									"meta": {
										"type": "object",
										"properties": {
											"allow_indexing": {
												"type": "boolean",
												"default": true,
												"description": "true to allow search engines to index your typeform. Otherwise, false."
											},
											"description": {
												"type": "string",
												"description": "Description for search engines to display for your typeform."
											},
											"image": {
												"type": "object",
												"properties": {
													"href": {
														"type": "string",
														"format": "uri",
														"description": "URL of image for search engines to display for your typeform."
													}
												}
											}
										}
									},
									"redirect_after_submit_url": {
										"type": "string",
										"description": "URL where the typeform should redirect upon submission."
									},
									"google_analytics": {
										"type": "string",
										"description": "Google Analytics tracking ID to use for the form."
									},
									"facebook_pixel": {
										"type": "string",
										"description": "Facebook Pixel tracking ID to use for the form."
									},
									"google_tag_manager": {
										"type": "string",
										"description": "Google Tag Manager ID to use for the form."
									},
									"notifications": {
										"type": "object",
										"properties": {
											"self": {
												"type": "object",
												"description": "Settings for notifications sent when respondents complete and submit the typeform.",
												"properties": {
													"enabled": {
														"type": "boolean",
														"default": true,
														"description": "true to send notifications. false to disable notifications."
													},
													"recipients": {
														"type": "array",
														"items": {
															"type": "string",
															"format": "email",
															"description": "Email addresses where notifications should be sent."
														}
													},
													"reply_to": {
														"type": "string",
														"description": "Email address to use for notification Reply-To. Must be a Recall Information value based on respondent's answer to a field: {{field:ref}} or {{hidden:ref}}."
													},
													"subject": {
														"type": "string",
														"example": "You received a response to your typeform {{form:title}}!",
														"description": "Subject to use for the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:email}}, {{account:name}}, {{link:report}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}."
													},
													"message": {
														"type": "string",
														"description": "Message to include in the body of the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:email}}, {{account:name}}, {{link:report}}, {{form:all_answers}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}.\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
													}
												},
												"required": ["recipients", "subject", "message"]
											},
											"respondent": {
												"type": "object",
												"description": "Settings for notifications sent to respondents immediately after submitting the typeform.",
												"properties": {
													"enabled": {
														"type": "boolean",
														"default": true,
														"description": "true to send respondent notifications. false to disable respondent notifications."
													},
													"recipient": {
														"type": "string",
														"description": "Email where respondent notification will be sent. Must be a Recall Information value based on respondent's answer to a field: {{field:ref}} or {{hidden:ref}}."
													},
													"reply_to": {
														"type": "array",
														"items": {
															"type": "string",
															"format": "email",
															"description": "Email address to use for respondent notification Reply-To."
														}
													},
													"subject": {
														"type": "string",
														"example": "Thank you for completing the typeform {{form:title}}!",
														"description": "Subject to use for the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:fullname}}, {{account:email}}, {{account:name}}, {{link:report}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}."
													},
													"message": {
														"type": "string",
														"description": "Message to include in the body of the notification email. Can combine text and Recall Information value from one or more fields.\n\nAvailable Recall Information values are {{form:title}}, {{account:fullname}}, {{account:email}}, {{account:name}}, {{link:report}}, {{form:all_answers}}, and standard Recall Information for fields {{field:ref}} and hidden fields {{hidden:ref}}.\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
													}
												},
												"required": ["recipient", "subject", "message"]
											}
										}
									}
								}
							},
							"theme": {
								"type": "string",
								"example": "https://api.typeform.com/themes/Fs24as",
								"description": "URL of the theme to use for the typeform. If you don't specify a URL for the theme, Typeform applies a new copy of the default theme to the form."
							},
							"workspace": {
								"type": "object",
								"properties": {
									"href": {
										"type": "string",
										"example": "https://api.typeform.com/workspaces/Aw33bz"
									}
								},
								"description": "URL of the workspace to use for the typeform. If you don't specify a URL for the workspace, Typeform saves the form in the default workspace."
							},
							"hidden": {
								"type": "array",
								"default": [],
								"description": "Array of Hidden Fields to use in the form.",
								"items": {
									"type": "string"
								}
							},
							"variables": {
								"type": "object",
								"properties": {
									"score": {
										"type": "integer",
										"description": "Recall Information for keeping score as users answer each question (for example, for quizzes).",
										"enum": [0]
									},
									"price": {
										"type": "number",
										"description": "Recall Information for tracking the total price of all items users select (for example, for shopping carts, donation campaigns, and payment collections)."
									}
								}
							},
							"welcome_screens": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the welcome screen.",
											"example": "nice-readable-welcome-ref"
										},
										"title": {
											"type": "string",
											"description": "Title for the welcome screen.",
											"example": "Welcome Title"
										},
										"properties": {
											"type": "object",
											"properties": {
												"description": {
													"type": "string",
													"description": "Description of the welcome screen.",
													"example": "Cool description for the welcome"
												},
												"show_button": {
													"type": "boolean",
													"description": "true to display a 'Start' button on the welcome screen. Otherwise, false.",
													"example": true
												},
												"button_text": {
													"type": "string",
													"description": "Text to display on the 'Start' button on the welcome screen.",
													"example": "start"
												}
											}
										},
										"attachment": {
											"example": null,
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										}
									},
									"required": ["title"]
								}
							},
							"thankyou_screens": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ref": {
											"type": "string",
											"description": "Readable name you can use to reference the thank you screen.",
											"example": "nice-readable-thank-you-ref"
										},
										"title": {
											"type": "string",
											"description": "Title for the thank you screen.",
											"example": "Thank you Title"
										},
										"properties": {
											"type": "object",
											"properties": {
												"show_button": {
													"type": "boolean",
													"description": "true to display a 'Submit' button on the thank you screen. Otherwise, false.",
													"example": true
												},
												"button_text": {
													"type": "string",
													"description": "Text to display on the 'Submit' button on the thank you screen.",
													"example": "start"
												},
												"button_mode": {
													"type": "string",
													"description": "Specify whether the form should reload or redirect to another URL when respondents click the 'Submit' button. [Premium feature](https://www.typeform.com/pricing/).",
													"enum": ["reload", "redirect"],
													"example": "redirect"
												},
												"redirect_url": {
													"type": "string",
													"description": "URL where the typeform should redirect after submission, if you specified \"redirect\" for `button_mode`.",
													"example": "https://www.typeform.com"
												},
												"share_icons": {
													"type": "boolean",
													"description": "true to display social media sharing icons on the thank you screen so respondents can post your typeform's link on Facebook, Twitter, LinkedIn, and Google+. Otherwise, false.",
													"example": false
												}
											}
										},
										"attachment": {
											"type": "object",
											"description": "Allows you to display images and videos. Available for welcome and thank you screens, as well as `date`, `dropdown`, `email`, `group`, `long_text`, `multiple_choice`, `number`, `opinion_scale`, `payment`, `rating`, `short_text`, `statement`, `phone_number`, and `yes_no` fields.",
											"properties": {
												"type": {
													"type": "string",
													"description": "Type of attachment.",
													"enum": ["image", "video"],
													"example": "image"
												},
												"href": {
													"type": "string",
													"description": "URL for the image or video you want to display. Images must already exist in your account---use the image's Typeform URL, such as `\"https://images.typeform.com/images/kbn8tc98AHb\"`. For videos, use the video's YouTube.com URL.",
													"example": "https://images.typeform.com/images/4bcd3"
												},
												"scale": {
													"type": "number",
													"format": "float",
													"description": "Optional parameter for responsively scaling videos. Available only for `\"video\"` type. Default value is 0.6",
													"enum": [0.4, 0.6, 0.8, 1]
												}
											}
										}
									},
									"required": ["title"]
								}
							},
							"logic": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"description": "Specifies whether the Logic Jump is based on a question field or Hidden Field.",
											"enum": ["field", "hidden"]
										},
										"ref": {
											"type": "string",
											"description": "Reference to the field that triggers the the Logic Jump."
										},
										"actions": {
											"type": "array",
											"description": "Array of objects that define the Logic Jump's behavior.",
											"items": {
												"type": "object",
												"properties": {
													"action": {
														"type": "string",
														"description": "Behavior the Logic Jump will take.",
														"enum": ["jump", "add", "subtract", "multiply", "divide"]
													},
													"details": {
														"type": "object",
														"description": "Properties that further specify how the Logic Jump will behave.",
														"properties": {
															"to": {
																"type": "object",
																"description": "Specifies where the Logic Jump leads---to another field (\"field\"), a Hidden Field (\"hidden\"), or thank you screen (\"thankyou\").",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Logic Jump \"to\" option you are using.",
																		"enum": ["field", "hidden", "thankyou"]
																	},
																	"value": {
																		"type": "string",
																		"description": "The \"ref\" value for the field, Hidden Field, or thank you screen the Logic Jump leads to."
																	}
																},
																"required": ["type", "value"]
															},
															"target": {
																"type": "object",
																"description": "Keeps a running total for the `score` or `price` variable.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Specifies that the value is a variable.",
																		"enum": ["variable"]
																	},
																	"value": {
																		"type": "string",
																		"description": "Variable value to use in calculation.",
																		"enum": ["score", "price"]
																	}
																},
																"required": ["type", "value"]
															},
															"value": {
																"type": "object",
																"description": "Specifies the numeric value to use in the calculation for the `score` or `price` variable.",
																"properties": {
																	"type": {
																		"type": "string",
																		"description": "Specifies that the numeric value is a constant.",
																		"enum": ["constant"]
																	},
																	"value": {
																		"type": "number",
																		"description": "Numeric value to use in calculation."
																	}
																},
																"required": ["type", "value"]
															}
														}
													},
													"condition": {
														"type": "object",
														"description": "Conditions for executing the Logic Jump. Conditions answer the question, \"Under what circumstances?\" The condition object is the IF statement in your Logic Jump.",
														"properties": {
															"op": {
																"type": "string",
																"description": "Operator for the condition.",
																"enum": ["begins_with", "ends_with", "contains", "not_contains", "lower_than", "lower_equal_than", "greater_than", "greater_equal_than", "is", "is_not", "equal", "not_equal", "always", "on", "not_on", "earlier_than", "earlier_than_or_on", "later_than", "later_than_or_on"]
															},
															"vars": {
																"type": "array",
																"description": "Object that defines the field type and value to evaluate with the operator.",
																"items": {
																	"type": "object",
																	"properties": {
																		"type": {
																			"type": "string",
																			"description": "Type of value the condition object refers to.",
																			"enum": ["field", "hidden", "variable", "constant", "end"]
																		},
																		"value": {
																			"type": "object",
																			"description": "Value to check for in the \"type\" field to evaluate with the operator."
																		}
																	},
																	"required": ["type", "value"]
																}
															}
														},
														"required": ["op", "vars"]
													}
												},
												"required": ["action", "details", "condition"]
											}
										}
									},
									"required": ["type", "actions"]
								}
							}
						},
						"description": "Request the user submits to create or update a form.",
						"required": ["title", "workspace"],
						"example": {
							"title": "This is an example form",
							"settings": {
								"language": "en",
								"is_public": false,
								"progress_bar": "percentage",
								"show_progress_bar": true,
								"show_typeform_branding": false,
								"meta": {
									"allow_indexing": true,
									"description": "Cool meta description",
									"image": {
										"href": "https://images.typeform.com/images/4bcd3"
									}
								},
								"redirect_after_submit_url": "https://www.redirecttohere.com",
								"google_analytics": "UA-1111-22",
								"facebook_pixel": "4347295725729872",
								"google_tag_manager": "gtm-43959999",
								"notifications": {
									"self": {
										"enabled": true,
										"recipients": ["email@example.org"],
										"reply_to": "{{field:email_field_reference}}",
										"subject": "Typeform: new response for {{form:title}}",
										"message": "Your typeform {{form:title}} has a new response\n\n{{form:all_answers}}"
									},
									"respondent": {
										"enabled": false,
										"recipient": "{{field:email_field_reference}}",
										"reply_to": ["info@example.org"],
										"subject": "Typeform: Thank you for completing {{form:title}}!",
										"message": "Hi {{field:name_field_reference}}!\n\nWe recieved your submission. Thank you, and have a nice day!\n\nSincerely,\nThe Team at My Company"
									}
								}
							},
							"theme": {
								"href": "https://api.typeform.com/themes/jL34ds"
							},
							"workspace": {
								"href": "https://api.typeform.com/workspaces/Aw33bz"
							},
							"hidden": ["var1", "var2", "var3"],
							"variables": {
								"score": 0,
								"price": 10.59
							},
							"welcome_screens": [{
								"ref": "nice-readable-welcome-ref",
								"title": "Welcome Title",
								"properties": {
									"description": "Cool description for the welcome",
									"show_button": true,
									"button_text": "start"
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"thankyou_screens": [{
								"ref": "nice-readable-thank-you-ref",
								"title": "Thank you Title",
								"properties": {
									"show_button": true,
									"button_text": "start",
									"button_mode": "redirect",
									"redirect_url": "https://www.typeform.com",
									"share_icons": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"fields": [{
								"ref": "nice_readable_date_reference",
								"title": "Date Title",
								"type": "date",
								"properties": {
									"description": "Cool description for the date",
									"structure": "DDMMYYYY",
									"separator": "-"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_dropdown_reference",
								"title": "Dropdown Title",
								"type": "dropdown",
								"properties": {
									"description": "Cool description for the dropdown",
									"alphabetical_order": false,
									"randomize": false,
									"choices": [{
										"label": "Foo"
									}, {
										"label": "Bar"
									}]
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_email_reference",
								"title": "Email Title",
								"type": "email",
								"properties": {
									"description": "Cool description for the email"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_file_upload_reference",
								"title": "File Upload Title",
								"type": "file_upload",
								"properties": {
									"description": "Cool description for the file upload"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_legal_reference",
								"title": "Legal Title",
								"type": "legal",
								"properties": {
									"description": "Cool description for the legal"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_long_text_reference",
								"title": "Long Text Title",
								"type": "long_text",
								"properties": {
									"description": "Cool description for the long text"
								},
								"validations": {
									"required": false,
									"max_length": 20
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_multiple_choice_reference",
								"title": "Multiple Choice Title",
								"type": "multiple_choice",
								"properties": {
									"description": "Cool description for the multiple choice",
									"randomize": true,
									"allow_multiple_selection": false,
									"allow_other_choice": true,
									"vertical_alignment": false,
									"choices": [{
										"label": "Foo",
										"ref": "foo_choice_ref"
									}, {
										"label": "Bar",
										"ref": "bar_choice_ref"
									}]
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_number_reference",
								"title": "Number Title",
								"type": "number",
								"properties": {
									"description": "Cool description for the number"
								},
								"validations": {
									"required": false,
									"min_value": 20,
									"max_value": 50
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_opinion_scale_reference",
								"title": "Opinion Scale Title",
								"type": "opinion_scale",
								"properties": {
									"description": "Cool description for the opinion scale field",
									"steps": 9,
									"start_at_one": true,
									"labels": {
										"left": "left label",
										"center": "center label",
										"right": "right label"
									}
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_picture_choice_reference",
								"title": "Picture Choice Title",
								"type": "picture_choice",
								"properties": {
									"description": "Cool description for the picture choice",
									"randomize": true,
									"allow_multiple_selection": false,
									"allow_other_choice": true,
									"supersized": false,
									"show_labels": false,
									"choices": [{
										"ref": "foo_choice_ref1",
										"label": "Foo 1",
										"attachment": {
											"type": "image",
											"href": "https://images.typeform.com/images/4bcd3"
										}
									}, {
										"ref": "foo_choice_ref2",
										"label": "Foo 2",
										"attachment": {
											"type": "image",
											"href": "https://images.typeform.com/images/4bcd3"
										}
									}]
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_rating_reference",
								"title": "Rating Title",
								"type": "rating",
								"properties": {
									"description": "Cool description for the rating",
									"steps": 10,
									"shape": "star"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_short_text_reference",
								"title": "Short Text Title",
								"type": "short_text",
								"properties": {
									"description": "Cool description for the short text"
								},
								"validations": {
									"required": false,
									"max_length": 20
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_statement_reference",
								"title": "Statement Title",
								"type": "statement",
								"properties": {
									"description": "Cool description for the statement",
									"button_text": "Statement button text",
									"hide_marks": true
								},
								"attachment": {
									"type": "video",
									"href": "https://www.youtube.com/watch?v=Uui3oT-XBxs",
									"scale": 0.8
								}
							}, {
								"ref": "nice_readable_website_reference",
								"title": "Website Title",
								"type": "website",
								"properties": {
									"description": "Cool description for the website"
								},
								"validations": {
									"required": false
								}
							}, {
								"ref": "nice_readable_yes_no_reference",
								"title": "yes or no",
								"type": "yes_no",
								"properties": {
									"description": "Cool description for the Yes/No question"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "nice_readable_payment_reference",
								"title": "payment",
								"type": "payment",
								"properties": {
									"description": "Cool description for the payment group",
									"currency": "EUR",
									"price": {
										"type": "variable",
										"value": "price"
									},
									"show_button": true,
									"button_text": "next"
								},
								"validations": {
									"required": false
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}, {
								"ref": "a_group_field_ref",
								"title": "group field",
								"type": "group",
								"properties": {
									"description": "Question group description",
									"show_button": true,
									"button_text": "Some text",
									"fields": [{
										"ref": "nice_readable_website_reference",
										"title": "website",
										"type": "website",
										"properties": {
											"description": "Cool description for the website"
										}
									}]
								},
								"attachment": {
									"type": "image",
									"href": "https://images.typeform.com/images/4bcd3"
								}
							}],
							"logic": [{
								"type": "field",
								"ref": "nice_readable_yes_no_reference",
								"actions": [{
									"action": "jump",
									"details": {
										"to": {
											"type": "field",
											"value": "nice_readable_rating_reference"
										}
									},
									"condition": {
										"op": "equal",
										"vars": [{
											"type": "field",
											"value": "nice_readable_number_reference"
										}, {
											"type": "constant",
											"value": 5
										}]
									}
								}, {
									"action": "add",
									"details": {
										"target": {
											"type": "variable",
											"value": "score"
										},
										"value": {
											"type": "constant",
											"value": 5
										}
									},
									"condition": {
										"op": "is",
										"vars": [{
											"type": "field",
											"value": "nice_readable_yes_no_reference"
										}, {
											"type": "constant",
											"value": true
										}]
									}
								}]
							}]
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"get": {
				"tags": ["Forms"],
				"summary": "Retrieve form",
				"description": "Retrieves a form by the given `form_id`. Includes any theme and images attached to the form as references.\n\nDetails about the fields and elements for this endpoint are available in the **Create Form** description.",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"delete": {
				"tags": ["Forms"],
				"summary": "Delete form",
				"description": "Deletes the form with the given `form_id` and all of the form's responses.",
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}],
				"produces": [""]
			}
		},
		"/forms/{form_id}/messages": {
			"get": {
				"tags": ["Forms"],
				"summary": "Retrieve custom form messages",
				"description": "Retrieves the customizable messages for a form (specified by `form_id`) using the form's  specified language.\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden.",
				"produces": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"put": {
				"tags": ["Forms"],
				"summary": "Update custom messages",
				"description": "Specifies new values for the customizable messages in a form (specified by `form_id`).\n\nYou can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden.",
				"consumes": ["application/json"],
				"produces": [""],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"required": true,
					"description": "Key-value message pairs to update.",
					"schema": {
						"type": "object",
						"description": "Messages that forms can use.",
						"properties": {
							"label.buttonHint.default": {
								"type": "string",
								"description": "Default tooltip button message. Maximum 28 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.buttonHint.longtext": {
								"type": "string",
								"description": "Tooltip button message for long text blocks. Maximum 28 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.warning.connection": {
								"type": "string",
								"description": "Server connection error message. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.buttonNoAnswer.default": {
								"type": "string",
								"description": "Default continue button message. Maximum 100 characters."
							},
							"label.warning.correction": {
								"type": "string",
								"description": "List of errors message. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.payment.cardNameTitle": {
								"type": "string",
								"description": "Credit card name message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.payment.cardNumberTitle": {
								"type": "string",
								"description": "Credit card number message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.payment.cvcDescription": {
								"type": "string",
								"description": "Credit card security number message"
							},
							"block.payment.cvcNumberTitle": {
								"type": "string",
								"description": "Credit card CVC number message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.shortText.placeholder": {
								"type": "string",
								"description": "Text input placeholder. Maximum 100 characters."
							},
							"label.error.emailAddress": {
								"type": "string",
								"description": "Invalid email error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.expiryMonthTitle": {
								"type": "string",
								"description": "Credit card expiry month message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.expiryYearTitle": {
								"type": "string",
								"description": "Credit card expiry year message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.warning.fallbackAlert": {
								"type": "string",
								"description": "Fallback alert message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.fileUpload.choose": {
								"type": "string",
								"description": "File upload button message. Maximum 34 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.fileUpload.drag": {
								"type": "string",
								"description": "File upload dragging action message. Maximum 35 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.fileUpload.uploadingProgress": {
								"type": "string",
								"description": "Still processing file upload message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.sizeLimit": {
								"type": "string",
								"description": "File too big error message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.warning.formUnavailable": {
								"type": "string",
								"description": "Private form error message. Accepts variable `form:name`. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.incompleteForm": {
								"type": "string",
								"description": "Incomplete fields error message. Maximum 42 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.hint.key": {
								"type": "string",
								"description": "Key letter hint message. Maximum 100 characters."
							},
							"block.legal.reject": {
								"type": "string",
								"description": "Legal field deny message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.legal.accept": {
								"type": "string",
								"description": "Legal field accept message. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.maxValue": {
								"type": "string",
								"description": "Number maximum value tooltip message. Accepts variable `field:max`. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.maxLength": {
								"type": "string",
								"description": "Text fields maximum length tooltip message. Accepts variable `field:max_length`. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.minValue": {
								"type": "string",
								"description": "Number minimum value tooltip message. Accepts variable `field:min`. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.range": {
								"type": "string",
								"description": "Number minimum and maximum range value tooltip message. Accepts variables `field:min` and `field:max`. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.multipleChoice.hint": {
								"type": "string",
								"description": "Choose as many as you like message for multiple choice fields. Maximum 45 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.mustEnter": {
								"type": "string",
								"description": "Required value error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.error.mustSelect": {
								"type": "string",
								"description": "Required selection error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.no.shortcut": {
								"type": "string",
								"description": "Keyboard shortcut for the \"No\" option. Maximum 1 character."
							},
							"label.no.default": {
								"type": "string",
								"description": "Representation for the word \"No.\" You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.dropdown.hint": {
								"type": "string",
								"description": "Not suggestions found for dropdown fields error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.multipleChoice.other": {
								"type": "string",
								"description": "Other answer message. Maximum 100 characters."
							},
							"label.progress.percent": {
								"type": "string",
								"description": "Completion percentage message. Accepts variable `progress:percent`. Maximum 100 characters."
							},
							"label.progress.proportion": {
								"type": "string",
								"description": "Completion proportion message. Accepts variables `progress:step` and `progress:total`. Maximum 100 characters."
							},
							"label.error.required": {
								"type": "string",
								"description": "Required field error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.preview": {
								"type": "string",
								"description": "Review fields error message. Accepts variable `form:unanswered_fields`. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.button.review": {
								"type": "string",
								"description": "Review button message. Maximum 100 characters."
							},
							"label.error.server": {
								"type": "string",
								"description": "Server error message. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.action.share": {
								"type": "string",
								"description": "Share text message. Maximum 100 characters."
							},
							"label.button.submit": {
								"type": "string",
								"description": "Submit button message. Maximum 100 characters."
							},
							"label.warning.success": {
								"type": "string",
								"description": "Successful submit message. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.button.ok": {
								"type": "string",
								"description": "Answer confirm. Maximum 100 characters."
							},
							"label.error.mustAccept": {
								"type": "string",
								"description": "Legal field terms and conditions message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.longtext.hint": {
								"type": "string",
								"description": "Long text field tooltip message. Maximum 128 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"block.dropdown.placeholder": {
								"type": "string",
								"description": "Placeholder message with instructions for dropdown fields. Maximum 100 characters."
							},
							"block.dropdown.placeholderTouch": {
								"type": "string",
								"description": "Placeholder message with instructions for dropdown fields on touch devices. Maximum 100 characters."
							},
							"label.error.url": {
								"type": "string",
								"description": "Invalid URL error message. Maximum 64 characters. You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							},
							"label.yes.shortcut": {
								"type": "string",
								"description": "Keyboard shortcut for the \"Yes\" option. Maximum 1 character."
							},
							"label.yes.default": {
								"type": "string",
								"description": "Representation for the word \"Yes\". You can format messages with bold (`*bold*`) and italic (`_italic_`) text. HTML tags are forbidden."
							}
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/images/{image_id}/image/{size}": {
			"get": {
				"tags": ["Images"],
				"summary": "Retrieve image by size",
				"description": "Retrieve the JSON description or the binary of the requested image.\n\nUse the `Accept` header to specify the response format. If you use `application/json`, the JSON representation of the resource will be returned. Otherwise, the image as a binary will be returned (if the MIME type matches with the stored image).",
				"produces": ["application/json", "image/gif", "image/jpeg", "image/png"],
				"parameters": [{
					"name": "image_id",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Unique ID for the image to retrieve."
				}, {
					"name": "size",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Image size to retrieve.\n\n`default` is scaled to a width of 800px.\n\n`mobile` is scaled to a width of 460px.\n\n`thumbnail` is scaled so that the smallest image side equals the largest of either 80px wide or 50px in height and then cropped.",
					"enum": ["default", "mobile", "thumbnail"]
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/images/{image_id}/background/{size}": {
			"get": {
				"tags": ["Images"],
				"summary": "Retrieve background by size",
				"description": "Retrieve the JSON description or the binary of the requested background format.\n\nUse the `Accept` header to specify the response format. If you use `application/json`, the JSON representation of the resource will be returned. Otherwise, the image as a binary will be returned (if the MIME type matches with the stored one).",
				"produces": ["application/json", "image/gif", "image/jpeg", "image/png"],
				"parameters": [{
					"name": "image_id",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Unique ID for the image to retrieve."
				}, {
					"name": "size",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Image size to retrieve.\n\n`default` is scaled to fit within a width of 1680px and a height of 1050px.\n\n`tablet` is scaled to fit within a width of 1024px and a height of 768px.\n\n`mobile` is scaled to fit within a width of 460px and a height of 320px.\n\n`thumbnail` is scaled to fit within a width of 80px and a height of 50px.\n\n**NOTE:** Images used for typeform backgrounds are scaled and cropped from a top-left alignment to make sure they fill the screen properly.",
					"enum": ["default", "tablet", "mobile", "thumbnail"]
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/images/{image_id}/choice/{size}": {
			"get": {
				"tags": ["Images"],
				"summary": "Retrieve choice image by size",
				"description": "Retrieve the JSON description or the binary of the requested choice format.\n\nUse the `Accept` header to specify the response format. If you use `application/json`, the JSON representation of the resource will be returned. Otherwise, the image as a binary will be returned (if the MIME type matches with the stored one).",
				"produces": ["application/json", "image/gif", "image/jpeg", "image/png"],
				"parameters": [{
					"name": "image_id",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Unique ID for the image to retrieve."
				}, {
					"name": "size",
					"in": "path",
					"required": true,
					"type": "string",
					"description": "Image size to retrieve.\n\n`default` is scaled to fit within a width of 230px and a height of 230px.\n\n`thumbnail` is scaled so that the smallest image side equals the largest of either 80px wide or 80px in height and then cropped.\n\n`supersize` is scaled so that the smallest image side equals the largest of either 310px wide or 233px in height and then cropped.\n\n`supermobile` is scaled so that the smallest image side equals the largest of either 238px wide or 164px in height and then cropped.\n\n`supersizefit` is scaled to fit within a width of 310px and a height of 233px.\n\n`supermobilefit` is scaled to fit within a width of 238px and a height of 164px.",
					"enum": ["default", "thumbnail", "supersize", "supermobile", "supersizefit", "supermobilefit"]
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/images": {
			"post": {
				"security": [{
					"bearer_auth": []
				}],
				"tags": ["Images"],
				"summary": "Create image",
				"description": "Adds an image in your Typeform account.\n\nSpecify the URL of your image or send your image in [base64](https://en.wikipedia.org/wiki/Base64) format, which encodes the image data as ASCII text. You can use a tool like [Base64 Image Encoder](https://www.base64-image.de) to get the base64 code for the image you want to add.",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The image request payload. You must specify either `image` and `file_name` or `url`.",
					"schema": {
						"type": "object",
						"properties": {
							"image": {
								"type": "string",
								"description": "Base64 code for the image. Note that base64 encoders may add descriptors to the code (such as `data:image/png;base64,`). Do not include these descriptors in your image string---include only the base64 code."
							},
							"file_name": {
								"type": "string",
								"description": "File name for the image."
							},
							"url": {
								"type": "string",
								"description": "URL of the image."
							}
						},
						"example": {
							"image": "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAG0lEQVR42mOccuMbA7mAcVTzqOZRzaOaB1YzABKjL70rq/b4AAAAAElFTkSuQmCC",
							"file_name": "newimage.gif"
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"get": {
				"security": [{
					"bearer_auth": []
				}],
				"tags": ["Images"],
				"summary": "Retrieve images collection",
				"description": "Retrieves a list of JSON descriptions for all images in your Typeform account. Images are listed in reverse-chronological order based on the date you added them to your account.",
				"produces": ["application/json"],
				"parameters": [{
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/images/{image_id}": {
			"get": {
				"tags": ["Images"],
				"summary": "Retrieve image",
				"description": "Retrieves the JSON description or the binary of the original image for the specified `image_id`.\n\n**NOTE:** Default is to return the binary of the original image. Use the `Accept` header to specify `application/json` to return the JSON description of the image instead.",
				"produces": ["application/json", "image/gif", "image/jpeg", "image/png"],
				"parameters": [{
					"name": "image_id",
					"description": "Unique ID for the image to retrieve.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"delete": {
				"security": [{
					"bearer_auth": []
				}],
				"tags": ["Images"],
				"summary": "Delete image",
				"description": "Deletes an image from your Typeform account.",
				"parameters": [{
					"name": "image_id",
					"description": "Unique ID for the image to retrieve.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/themes": {
			"post": {
				"tags": ["Themes"],
				"summary": "Create theme",
				"description": "Creates a new theme.",
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Request to create a new theme.",
					"required": true,
					"schema": {
						"title": "Theme",
						"type": "object",
						"properties": {
							"background": {
								"title": "Background",
								"description": "Settings for the background.",
								"type": "object",
								"properties": {
									"href": {
										"description": "Background image URL.",
										"type": "string",
										"default": ""
									},
									"layout": {
										"description": "Layout for the background.",
										"type": "string",
										"default": "fullscreen",
										"enum": ["fullscreen", "repeat", "no-repeat"]
									},
									"brightness": {
										"description": "Brightness for the background. `-1` is least bright (minimum) and `1` is most bright (maximum).",
										"type": "number",
										"default": 0
									}
								}
							},
							"colors": {
								"description": "Colors the theme will apply to answers, background, buttons, and questions.",
								"properties": {
									"answer": {
										"default": "#4FB0AE",
										"description": "Color the theme will apply to answers. Hexadecimal value.",
										"type": "string"
									},
									"background": {
										"default": "#FFFFFF",
										"description": "Color the theme will apply to the background. Hexadecimal value.",
										"type": "string"
									},
									"button": {
										"default": "#4FB0AE",
										"description": "Color the theme will apply to buttons. Hexadecimal value.",
										"type": "string"
									},
									"question": {
										"default": "#3D3D3D",
										"description": "Color the theme will apply to questions. Hexadecimal value.",
										"type": "string"
									}
								},
								"required": ["question", "answer", "button", "background"],
								"title": "Colors",
								"type": "object"
							},
							"font": {
								"type": "string",
								"description": "Font for the theme.",
								"default": "Source Sans Pro",
								"enum": ["Acme", "Arial", "Arvo", "Avenir Next", "Bangers", "Cabin", "Cabin Condensed", "Courier", "Crete Round", "Dancing Script", "Exo", "Georgia", "Handlee", "Helvetica Neue", "Karla", "Lato", "Lekton", "Lobster", "Lora", "McLaren", "Montserrat", "Nixie One", "Old Standard TT", "Open Sans", "Oswald", "Playfair Display", "Quicksand", "Raleway", "Signika", "Sniglet", "Source Sans Pro", "Vollkorn"]
							},
							"has_transparent_button": {
								"default": false,
								"description": "`true` if buttons should be transparent. Otherwise, `false`.",
								"type": "boolean"
							},
							"name": {
								"default": "",
								"description": "Name for the theme.",
								"type": "string"
							}
						},
						"required": ["name", "font", "colors"],
						"example": {
							"background": {
								"brightness": -0.59,
								"image_id": 987,
								"layout": "fullscreen"
							},
							"colors": {
								"answer": "#800000",
								"background": "#FFFFFF",
								"button": "#808080",
								"question": "#000000"
							},
							"font": "Arial",
							"has_transparent_button": false,
							"name": "My theme",
							"visibility": "private"
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"get": {
				"tags": ["Themes"],
				"summary": "Retrieve themes",
				"description": "Retrieves a list of JSON descriptions for all themes in your Typeform account (public and private). Themes are listed in reverse-chronological order based on the date you added them to your account.",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "page",
					"in": "query",
					"type": "integer",
					"default": 1,
					"description": "The page of results to retrieve. Default `1` is the first page of results."
				}, {
					"name": "page_size",
					"in": "query",
					"type": "number",
					"default": 10,
					"maximum": 200,
					"description": "Number of results to retrieve per page. Default is 10. Maximum is 200."
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/themes/{theme_id}": {
			"get": {
				"tags": ["Themes"],
				"summary": "Retrieve theme",
				"description": "Retrieves a theme in your Typeform account.",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "theme_id",
					"in": "path",
					"type": "string",
					"required": true,
					"description": "Unique ID for the theme."
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"put": {
				"tags": ["Themes"],
				"summary": "Update theme",
				"description": "Updates a theme in your Typeform account. **NOTE:** You can't change Typeform's public themes (the built-in themes that are available in all accounts).",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "theme_id",
					"in": "path",
					"type": "string",
					"required": true,
					"description": "Unique ID for the theme."
				}, {
					"in": "body",
					"name": "body",
					"description": "Theme request payload.",
					"required": true,
					"schema": {
						"title": "Theme",
						"type": "object",
						"properties": {
							"background": {
								"title": "Background",
								"description": "Settings for the background.",
								"type": "object",
								"properties": {
									"href": {
										"description": "Background image URL.",
										"type": "string",
										"default": ""
									},
									"layout": {
										"description": "Layout for the background.",
										"type": "string",
										"default": "fullscreen",
										"enum": ["fullscreen", "repeat", "no-repeat"]
									},
									"brightness": {
										"description": "Brightness for the background. `-1` is least bright (minimum) and `1` is most bright (maximum).",
										"type": "number",
										"default": 0
									}
								}
							},
							"colors": {
								"description": "Colors the theme will apply to answers, background, buttons, and questions.",
								"properties": {
									"answer": {
										"default": "#4FB0AE",
										"description": "Color the theme will apply to answers. Hexadecimal value.",
										"type": "string"
									},
									"background": {
										"default": "#FFFFFF",
										"description": "Color the theme will apply to the background. Hexadecimal value.",
										"type": "string"
									},
									"button": {
										"default": "#4FB0AE",
										"description": "Color the theme will apply to buttons. Hexadecimal value.",
										"type": "string"
									},
									"question": {
										"default": "#3D3D3D",
										"description": "Color the theme will apply to questions. Hexadecimal value.",
										"type": "string"
									}
								},
								"required": ["question", "answer", "button", "background"],
								"title": "Colors",
								"type": "object"
							},
							"font": {
								"type": "string",
								"description": "Font for the theme.",
								"default": "Source Sans Pro",
								"enum": ["Acme", "Arial", "Arvo", "Avenir Next", "Bangers", "Cabin", "Cabin Condensed", "Courier", "Crete Round", "Dancing Script", "Exo", "Georgia", "Handlee", "Helvetica Neue", "Karla", "Lato", "Lekton", "Lobster", "Lora", "McLaren", "Montserrat", "Nixie One", "Old Standard TT", "Open Sans", "Oswald", "Playfair Display", "Quicksand", "Raleway", "Signika", "Sniglet", "Source Sans Pro", "Vollkorn"]
							},
							"has_transparent_button": {
								"default": false,
								"description": "`true` if buttons should be transparent. Otherwise, `false`.",
								"type": "boolean"
							},
							"name": {
								"default": "",
								"description": "Name for the theme.",
								"type": "string"
							}
						},
						"required": ["name", "font", "colors"],
						"example": {
							"background": {
								"brightness": -0.59,
								"image_id": 987,
								"layout": "fullscreen"
							},
							"colors": {
								"answer": "#800000",
								"background": "#FFFFFF",
								"button": "#808080",
								"question": "#000000"
							},
							"font": "Arial",
							"has_transparent_button": false,
							"name": "My theme",
							"visibility": "private"
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"delete": {
				"tags": ["Themes"],
				"summary": "Delete theme",
				"description": "Deletes a theme from your Typeform account.",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "theme_id",
					"in": "path",
					"type": "string",
					"required": true,
					"description": "Unique ID for the theme."
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/forms/{form_id}/webhooks": {
			"get": {
				"tags": ["Webhooks"],
				"summary": "Retrieve webhooks",
				"description": "Retrieve all webhooks for the specified typeform.",
				"produces": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		},
		"/forms/{form_id}/webhooks/{tag}": {
			"get": {
				"tags": ["Webhooks"],
				"summary": "Retrieve single webhook",
				"description": "Retrieve a single webhook.",
				"produces": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "tag",
					"in": "path",
					"required": true,
					"description": "Unique name you want to use for the webhook.",
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			},
			"put": {
				"tags": ["Webhooks"],
				"summary": "Create or update webhook",
				"description": "Create or update a webhook.",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "tag",
					"in": "path",
					"required": true,
					"description": "Unique name you want to use for the webhook.",
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The update webhook payload.",
					"required": true,
					"schema": {
						"type": "object",
						"properties": {
							"url": {
								"description": "Webhook URL.",
								"type": "string"
							},
							"enabled": {
								"description": "True if you want to send responses to the webhook immediately. Otherwise, false.",
								"type": "boolean"
							},
							"secret": {
								"description": "If specified, will be used to sign the webhook payload with HMAC SHA256, so that you can verify that it came from Typeform.",
								"type": "string"
							},
							"verify_ssl": {
								"description": "True if you want Typeform to verify SSL certificates when delivering payloads.",
								"type": "boolean"
							}
						},
						"example": {
							"url": "https://test.com",
							"enabled": true
						}
					}
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}],
				"produces": ["application/json"]
			},
			"delete": {
				"tags": ["Webhooks"],
				"summary": "Delete webhook",
				"description": "Delete a webhook.",
				"parameters": [{
					"name": "form_id",
					"description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is `u6nXL7`.",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "tag",
					"in": "path",
					"required": true,
					"description": "Unique name you want to use for the webhook.",
					"type": "string"
				}, {
					"name": "Authorization",
					"in": "header",
					"required": true,
					"type": "string",
					"default": "Bearer {{typeform_personal_token}}"
				}]
			}
		}
	}
}